<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title type="text">Articles</title>
  <id>urn:uuid:2c1dc889-18e5-364f-aebe-4eb10b25c80c</id>
  <updated>2020-11-15T00:00:00Z</updated>
  <link href="https://www.psycopg.org/articles/" />
  <link href="https://www.psycopg.org/articles.xml" rel="self" />
  <author>
    <name></name>
  </author>
  <generator uri="https://github.com/t73fde/lektor-feed" version="20191006.1">Lektor Feed Plugin</generator>
  <entry xml:base="https://www.psycopg.org/articles/2020/11/15/psycopg3-copy/">
    <title type="text">The new COPY support in psycopg3</title>
    <id>urn:uuid:c10f8d1c-46a3-3db3-8542-aa60253cf8c7</id>
    <updated>2020-11-15T00:00:00Z</updated>
    <link href="https://www.psycopg.org/articles/2020/11/15/psycopg3-copy/" />
    <author>
      <name>Daniele Varrazzo</name>
    </author>
    <content type="html">&lt;p&gt;&lt;tt class=&quot;docutils literal&quot;&gt;psycopg2&lt;/tt&gt; allows &lt;a class=&quot;reference external&quot; href=&quot;https://www.psycopg.org/docs/usage.html#copy&quot;&gt;interaction with PostgreSQL COPY commands&lt;/a&gt;. However
what is possible to do with them is relatively limited: the only possible
interaction is with file-like objects:&lt;/p&gt;
&lt;ul class=&quot;simple&quot;&gt;
&lt;li&gt;there is no adaptation from Python objects to PostgreSQL, as there is for
normal queries: data must be formatted &amp;quot;manually&amp;quot; by the user;&lt;/li&gt;
&lt;li&gt;psycopg2 &amp;quot;pulls&amp;quot; data from the file: writing a system that produces data and
pushes it into PostgreSQL is a very contrived operation, requiring to write
a blocking file-like object;&lt;/li&gt;
&lt;li&gt;there is no support for &lt;a class=&quot;reference external&quot; href=&quot;https://github.com/psycopg/psycopg2/issues/428&quot;&gt;asynchronous copy&lt;/a&gt;.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;a class=&quot;reference external&quot; href=&quot;/psycopg3/&quot;&gt;psycopg3&lt;/a&gt; addresses these shortcomings and makes it easy to write Python
programs producing data and pushing it efficiently to the database using the
&lt;tt class=&quot;docutils literal&quot;&gt;COPY&lt;/tt&gt; protocol.&lt;/p&gt;
&lt;!-- CUT-HERE --&gt;
&lt;p&gt;&lt;tt class=&quot;docutils literal&quot;&gt;psycopg2&lt;/tt&gt; adaptation system is designed to compose queries client-side, so
it is concerned with the right use of the quotes: the python string
&lt;tt class=&quot;docutils literal&quot;&gt;O'Reilly&lt;/tt&gt; is converted to &lt;tt class=&quot;docutils literal&quot;&gt;&lt;span class=&quot;pre&quot;&gt;'O''Reilly'&lt;/span&gt;&lt;/tt&gt;, and the &lt;tt class=&quot;docutils literal&quot;&gt;date(2020, 11, 15)&lt;/tt&gt;
to &lt;tt class=&quot;docutils literal&quot;&gt;&lt;span class=&quot;pre&quot;&gt;'2020-11-15'::date&lt;/span&gt;&lt;/tt&gt;. These extra quotes get in the way of COPY, and
there isn't an intermediate level where a conversion to string is performed,
but no quote or other SQL construct are added.&lt;/p&gt;
&lt;p&gt;&lt;tt class=&quot;docutils literal&quot;&gt;psycopg3&lt;/tt&gt; uses the PostgreSQL extended query protocol and sends query and
parameters separately. Parameters require adaptation to the PostgreSQL
formats, but quoting, and quotes escaping, are no more its concern: the string
&lt;tt class=&quot;docutils literal&quot;&gt;O'Reilly&lt;/tt&gt; doesn't need further manipulation and the date is converted only
to the string &lt;tt class=&quot;docutils literal&quot;&gt;&lt;span class=&quot;pre&quot;&gt;2020-11-15&lt;/span&gt;&lt;/tt&gt;; types informations are passed as additional
separate information according to &lt;a class=&quot;reference external&quot; href=&quot;https://www.postgresql.org/docs/current/libpq-exec.html#LIBPQ-PQEXECPARAMS&quot;&gt;the libpq API&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;The server-side format of these values are exactly what the &lt;tt class=&quot;docutils literal&quot;&gt;COPY FROM&lt;/tt&gt;
command expects, so it's now easy to compose a row by adapting Python objects
and to pass&lt;/p&gt;
&lt;pre class=&quot;literal-block&quot;&gt;
O'Reilly\t2020-11-15\n
&lt;/pre&gt;
&lt;p&gt;to the server. The mechanism to do so is exposed to Python by a new context
manager, returned by the &lt;a class=&quot;reference external&quot; href=&quot;https://www.psycopg.org/psycopg3/docs/cursor.html#psycopg3.Cursor.copy&quot;&gt;Cursor.copy()&lt;/a&gt; method, which enables to write:&lt;/p&gt;
&lt;pre class=&quot;code python literal-block&quot;&gt;
&lt;span class=&quot;k&quot;&gt;with&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;cursor&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;copy&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&amp;quot;COPY mytable FROM STDIN&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;as&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;copy&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;copy&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;write_row&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;((&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&amp;quot;O'Reilly&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;date&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;2020&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;11&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;15&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)))&lt;/span&gt;
&lt;/pre&gt;
&lt;p&gt;Any list of tuples of values, or generator of sequences of values, can be used
to push data into Postgres:&lt;/p&gt;
&lt;pre class=&quot;code python literal-block&quot;&gt;
&lt;span class=&quot;k&quot;&gt;with&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;cursor&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;copy&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&amp;quot;COPY mytable FROM STDIN&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;as&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;copy&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;record&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;my_generator&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;():&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;copy&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;write_row&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;record&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;/pre&gt;
&lt;p&gt;The copy operation is concluded as soon as the &lt;tt class=&quot;docutils literal&quot;&gt;with&lt;/tt&gt; block is exited and,
in case a Python exception is raised, the error is pushed to the server, which
will cancel the COPY operation in progress.&lt;/p&gt;
&lt;div class=&quot;section&quot; id=&quot;binary-format&quot;&gt;
&lt;h2&gt;Binary format&lt;/h2&gt;
&lt;p&gt;The &lt;tt class=&quot;docutils literal&quot;&gt;Copy&lt;/tt&gt; object is also able to write data in &lt;a class=&quot;reference external&quot; href=&quot;https://www.postgresql.org/docs/13/sql-copy.html#id-1.9.3.55.9.4&quot;&gt;binary format&lt;/a&gt;: at Python
level this is entirely transparent:&lt;/p&gt;
&lt;pre class=&quot;code python literal-block&quot;&gt;
&lt;span class=&quot;k&quot;&gt;with&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;cursor&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;copy&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&amp;quot;COPY mytable FROM STDIN (FORMAT BINARY)&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;as&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;copy&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;record&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;generator&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;copy&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;write_row&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;record&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;/pre&gt;
&lt;p&gt;which might be more efficient than the textual format, but requires more care
with the data types, as the server will not even perform an innocent
&lt;tt class=&quot;docutils literal&quot;&gt;int4&lt;/tt&gt; -&amp;gt; &lt;tt class=&quot;docutils literal&quot;&gt;int8&lt;/tt&gt; cast for you.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;section&quot; id=&quot;block-level-copy&quot;&gt;
&lt;h2&gt;Block-level COPY&lt;/h2&gt;
&lt;p&gt;&lt;tt class=&quot;docutils literal&quot;&gt;psycopg2&lt;/tt&gt; allows (only) to operate on a COPY stream using a Python
file-like objects: behind the scenes it reads one block of data from the
source and writes it to the destination:&lt;/p&gt;
&lt;pre class=&quot;code python literal-block&quot;&gt;
&lt;span class=&quot;c1&quot;&gt;# From a file to the database&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;with&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;open&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&amp;quot;input.data&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;as&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;f&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;cursor2&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;copy_expert&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;f&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;COPY mytable FROM STDIN&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;

&lt;span class=&quot;c1&quot;&gt;# From the database to a file&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;with&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;open&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&amp;quot;input.data&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;w&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;as&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;f&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;cursor2&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;copy_expert&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;f&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;COPY mytable TO STDOUT&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;/pre&gt;
&lt;p&gt;This way of operating is not lost, but now the responsibility of moving data
from one stream to the other is left to the user's code:&lt;/p&gt;
&lt;pre class=&quot;code python literal-block&quot;&gt;
&lt;span class=&quot;k&quot;&gt;with&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;open&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&amp;quot;input.data&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;as&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;f&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;with&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;cursor3&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;copy&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&amp;quot;COPY mytable FROM STDIN&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;as&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;copy&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;while&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;data&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;:=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;f&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;read&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;SIZE&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;copy&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;write&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;data&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;with&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;cursor3&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;copy&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&amp;quot;COPY mytable TO STDOUT&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;as&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;copy&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;with&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;open&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&amp;quot;input.data&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;w&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;as&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;f&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;while&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;data&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;:=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;copy&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;read&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;f&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;write&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;data&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;/pre&gt;
&lt;p&gt;While the new pattern is more verbose, it allows to produce and consume data
with interfaces different than the file one, whereas previously it would have
required to write some form of file-like adapter, blocking the copy in case no
data was ready. This inversion of control allows, finally, the use of...&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;section&quot; id=&quot;asynchronous-copy&quot;&gt;
&lt;h2&gt;Asynchronous COPY&lt;/h2&gt;
&lt;p&gt;If your data producer, either at rows level or at blocks level, is capable of
asynchronous operations, it is now possible to combine it asynchronously with
COPY using exactly the same pattern as the sync code, only sprinkling the
magic words here and there:&lt;/p&gt;
&lt;pre class=&quot;code python literal-block&quot;&gt;
&lt;span class=&quot;k&quot;&gt;async&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;with&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;cursor&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;copy&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&amp;quot;COPY mytable FROM STDIN (FORMAT BINARY)&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;as&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;copy&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;async&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;record&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;my_async_generator&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;():&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;await&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;copy&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;write_row&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;record&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;async&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;with&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;async_producer&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;as&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;f&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;async&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;with&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;cursor&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;copy&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&amp;quot;COPY mytable FROM STDIN&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;as&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;copy&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;while&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;data&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;:=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;await&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;f&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;read&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
            &lt;span class=&quot;k&quot;&gt;await&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;copy&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;write&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;data&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;/pre&gt;
&lt;p&gt;which covers an important use case pretty much impossible to introduce in
&lt;tt class=&quot;docutils literal&quot;&gt;psycopg2&lt;/tt&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;section&quot; id=&quot;project-sponsorship&quot;&gt;
&lt;h2&gt;Project sponsorship&lt;/h2&gt;
&lt;div class=&quot;sponsor docutils container&quot;&gt;
&lt;p&gt;The new COPY support is one of several new features that are being
designed and implemented in &lt;a class=&quot;reference external&quot; href=&quot;/psycopg3/&quot;&gt;psycopg3&lt;/a&gt;. The project is currently &lt;a class=&quot;reference external&quot; href=&quot;https://github.com/psycopg/psycopg3&quot;&gt;under
active development&lt;/a&gt;: if there is enough support it will be possible to
work at the project full-time and bring it to release swiftly.&lt;/p&gt;
&lt;p&gt;If you use Python and PostgreSQL, and you would like to support the
creation of the most advanced adapter between the two systems, &lt;a class=&quot;reference external&quot; href=&quot;https://github.com/sponsors/dvarrazzo/&quot;&gt;please
consider becoming a sponsor&lt;/a&gt;. Thank you!&lt;/p&gt;
&lt;iframe src=&quot;https://github.com/sponsors/dvarrazzo/button&quot;
    title=&quot;Sponsor the project&quot; style=&quot;border: 0&quot;
    width=&quot;116&quot; height=&quot;35&quot;&gt;
&lt;/iframe&gt;&lt;/div&gt;
&lt;/div&gt;
</content>
  </entry>
  <entry xml:base="https://www.psycopg.org/articles/2020/09/06/psycopg-286-released/">
    <title type="text">Psycopg 2.8.6 released</title>
    <id>urn:uuid:22e7871e-8188-3868-9649-cf355a04484b</id>
    <updated>2020-09-06T00:00:00Z</updated>
    <link href="https://www.psycopg.org/articles/2020/09/06/psycopg-286-released/" />
    <author>
      <name>Daniele Varrazzo</name>
    </author>
    <content type="html">&lt;p&gt;Psycopg 2.8.6 has been released.&lt;/p&gt;
&lt;!-- CUT-HERE --&gt;
&lt;p&gt;You can download the files from the new release &lt;a class=&quot;reference external&quot; href=&quot;https://pypi.org/project/psycopg2/2.8.6/#files&quot;&gt;from PyPI&lt;/a&gt; or install it
with:&lt;/p&gt;
&lt;pre class=&quot;literal-block&quot;&gt;
pip install --upgrade psycopg2
&lt;/pre&gt;
&lt;p&gt;The changes included in the release are:&lt;/p&gt;
&lt;ul class=&quot;simple&quot;&gt;
&lt;li&gt;Fixed memory leak changing connection encoding to the current one
(&lt;a class=&quot;reference external&quot; href=&quot;https://github.com/psycopg/psycopg2/issues/1101&quot;&gt;ticket #1101&lt;/a&gt;).&lt;/li&gt;
&lt;li&gt;Fixed search of mxDateTime headers in virtualenvs (&lt;a class=&quot;reference external&quot; href=&quot;https://github.com/psycopg/psycopg2/issues/996&quot;&gt;ticket #996&lt;/a&gt;).&lt;/li&gt;
&lt;li&gt;Added missing values from errorcodes (&lt;a class=&quot;reference external&quot; href=&quot;https://github.com/psycopg/psycopg2/issues/1133&quot;&gt;ticket #1133&lt;/a&gt;).&lt;/li&gt;
&lt;li&gt;&lt;tt class=&quot;docutils literal&quot;&gt;cursor.query&lt;/tt&gt; reports the query of the last &lt;tt class=&quot;docutils literal&quot;&gt;COPY&lt;/tt&gt; operation too
(&lt;a class=&quot;reference external&quot; href=&quot;https://github.com/psycopg/psycopg2/issues/1141&quot;&gt;ticket #1141&lt;/a&gt;).&lt;/li&gt;
&lt;li&gt;&lt;tt class=&quot;docutils literal&quot;&gt;errorcodes&lt;/tt&gt; map and &lt;tt class=&quot;docutils literal&quot;&gt;errors&lt;/tt&gt; classes updated to PostgreSQL 13.&lt;/li&gt;
&lt;li&gt;Wheel package compiled against OpenSSL 1.1.1g.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Thank you very much to everyone who gave their contribution!&lt;/p&gt;
</content>
  </entry>
  <entry xml:base="https://www.psycopg.org/articles/2020/04/06/psycopg-285-released/">
    <title type="text">Psycopg 2.8.5 released</title>
    <id>urn:uuid:604ceb4a-4dca-35e4-80a3-601c2e85e879</id>
    <updated>2020-04-06T00:00:00Z</updated>
    <link href="https://www.psycopg.org/articles/2020/04/06/psycopg-285-released/" />
    <author>
      <name>Daniele Varrazzo</name>
    </author>
    <content type="html">&lt;p&gt;Psycopg 2.8.5 has been released.&lt;/p&gt;
&lt;p&gt;This release adds support for AIX and brings a few bug fixes.&lt;/p&gt;
&lt;!-- CUT-HERE --&gt;
&lt;p&gt;You can download the files from the new release &lt;a class=&quot;reference external&quot; href=&quot;https://pypi.org/project/psycopg2/2.8.5/#files&quot;&gt;from PyPI&lt;/a&gt; or install it
with:&lt;/p&gt;
&lt;pre class=&quot;literal-block&quot;&gt;
pip install --upgrade psycopg2
&lt;/pre&gt;
&lt;p&gt;The changes included in the release are:&lt;/p&gt;
&lt;ul class=&quot;simple&quot;&gt;
&lt;li&gt;Fixed use of &lt;tt class=&quot;docutils literal&quot;&gt;connection_factory&lt;/tt&gt; and &lt;tt class=&quot;docutils literal&quot;&gt;cursor_factory&lt;/tt&gt; together
(&lt;a class=&quot;reference external&quot; href=&quot;https://github.com/psycopg/psycopg2/issues/1019&quot;&gt;ticket #1019&lt;/a&gt;).&lt;/li&gt;
&lt;li&gt;Added support for &lt;tt class=&quot;docutils literal&quot;&gt;logging.LoggerAdapter&lt;/tt&gt; in
&lt;tt class=&quot;docutils literal&quot;&gt;LoggingConnection&lt;/tt&gt; (&lt;a class=&quot;reference external&quot; href=&quot;https://github.com/psycopg/psycopg2/issues/1026&quot;&gt;ticket #1026&lt;/a&gt;).&lt;/li&gt;
&lt;li&gt;&lt;tt class=&quot;docutils literal&quot;&gt;Column&lt;/tt&gt; objects in &lt;tt class=&quot;docutils literal&quot;&gt;cursor.description&lt;/tt&gt; can be sliced (&lt;a class=&quot;reference external&quot; href=&quot;https://github.com/psycopg/psycopg2/issues/1034&quot;&gt;ticket #1034&lt;/a&gt;).&lt;/li&gt;
&lt;li&gt;Added AIX support (&lt;a class=&quot;reference external&quot; href=&quot;https://github.com/psycopg/psycopg2/issues/1061&quot;&gt;ticket #1061&lt;/a&gt;).&lt;/li&gt;
&lt;li&gt;Fixed &lt;tt class=&quot;docutils literal&quot;&gt;copy()&lt;/tt&gt; of &lt;tt class=&quot;docutils literal&quot;&gt;DictCursor&lt;/tt&gt; rows (&lt;a class=&quot;reference external&quot; href=&quot;https://github.com/psycopg/psycopg2/issues/1073&quot;&gt;ticket #1073&lt;/a&gt;).&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Happy hacking!&lt;/p&gt;
</content>
  </entry>
  <entry xml:base="https://www.psycopg.org/articles/2019/10/20/psycopg-284-released/">
    <title type="text">Psycopg 2.8.4 released</title>
    <id>urn:uuid:cad23173-7ec1-317c-bfed-8457e88ce5df</id>
    <updated>2019-10-20T00:00:00Z</updated>
    <link href="https://www.psycopg.org/articles/2019/10/20/psycopg-284-released/" />
    <author>
      <name>Daniele Varrazzo</name>
    </author>
    <content type="html">&lt;p&gt;Psycopg 2.8.4 has been released.&lt;/p&gt;
&lt;p&gt;The release brings a few assorted bugfixes and adds support for Python 3.8 and PostgreSQL 12.&lt;/p&gt;
&lt;!-- CUT-HERE --&gt;
&lt;p&gt;A more detailed changes list is&lt;/p&gt;
&lt;ul class=&quot;simple&quot;&gt;
&lt;li&gt;Fixed building with Python 3.8 (&lt;a class=&quot;reference external&quot; href=&quot;https://github.com/psycopg/psycopg2/issues/854&quot;&gt;ticket #854&lt;/a&gt;).&lt;/li&gt;
&lt;li&gt;Don't swallow keyboard interrupts on connect when a password is specified
in the connection string (&lt;a class=&quot;reference external&quot; href=&quot;https://github.com/psycopg/psycopg2/issues/898&quot;&gt;ticket #898&lt;/a&gt;).&lt;/li&gt;
&lt;li&gt;Don't advance replication cursor when the message wasn't confirmed
(&lt;a class=&quot;reference external&quot; href=&quot;https://github.com/psycopg/psycopg2/issues/940&quot;&gt;ticket #940&lt;/a&gt;).&lt;/li&gt;
&lt;li&gt;Fixed inclusion of &lt;tt class=&quot;docutils literal&quot;&gt;time.h&lt;/tt&gt; on linux (&lt;a class=&quot;reference external&quot; href=&quot;https://github.com/psycopg/psycopg2/issues/951&quot;&gt;ticket #951&lt;/a&gt;).&lt;/li&gt;
&lt;li&gt;Fixed int overflow for large values in &lt;tt class=&quot;docutils literal&quot;&gt;Column.table_oid&lt;/tt&gt;
and &lt;tt class=&quot;docutils literal&quot;&gt;Column.type_code&lt;/tt&gt; (&lt;a class=&quot;reference external&quot; href=&quot;https://github.com/psycopg/psycopg2/issues/961&quot;&gt;ticket #961&lt;/a&gt;).&lt;/li&gt;
&lt;li&gt;&lt;tt class=&quot;docutils literal&quot;&gt;errorcodes&lt;/tt&gt; map and &lt;tt class=&quot;docutils literal&quot;&gt;errors&lt;/tt&gt; classes updated to
PostgreSQL 12.&lt;/li&gt;
&lt;li&gt;Wheel package compiled against OpenSSL 1.1.1d and PostgreSQL at least 11.4.&lt;/li&gt;
&lt;/ul&gt;
</content>
  </entry>
  <entry xml:base="https://www.psycopg.org/articles/2019/06/14/psycopg-283-released/">
    <title type="text">Psycopg 2.8.3 released</title>
    <id>urn:uuid:b2f83901-1a52-3aa4-af40-a406eb4eaa20</id>
    <updated>2019-06-14T00:00:00Z</updated>
    <link href="https://www.psycopg.org/articles/2019/06/14/psycopg-283-released/" />
    <author>
      <name>Daniele Varrazzo</name>
    </author>
    <content type="html">&lt;p&gt;We have released Psycopg 2.8.3, which includes a slight change to the logical replication.&lt;/p&gt;
&lt;p&gt;Choosing the right frequency to send replication feedback messages from the client to the server was previously the developer's responsibility, with too many feedback messages being a waste of bandwidth and server resources, too few slowing down WAL cleanup and possibly preventing a server graceful shutdown.&lt;/p&gt;
&lt;!-- CUT-HERE --&gt;
&lt;p&gt;Psycopg will now make sure that feedback is only sent after a certain period of time from the previous one, so that the client can simply call &lt;tt class=&quot;docutils literal&quot;&gt;send_feedback()&lt;/tt&gt; at each message without the fear of overwhelming the server.&lt;/p&gt;
&lt;p&gt;Further details are available in &lt;a class=&quot;reference external&quot; href=&quot;https://github.com/psycopg/psycopg2/pull/913&quot;&gt;the MR&lt;/a&gt; by &lt;a class=&quot;reference external&quot; href=&quot;https://github.com/CyberDem0n&quot;&gt;Alexander Kukushkin&lt;/a&gt; and &lt;a class=&quot;reference external&quot; href=&quot;https://github.com/a1exsh&quot;&gt;Oleksandr Shulgin&lt;/a&gt;. Thank you very much!&lt;/p&gt;
&lt;p&gt;For completeness, the changes included in the release are:&lt;/p&gt;
&lt;ul class=&quot;simple&quot;&gt;
&lt;li&gt;Added &lt;em&gt;interval_status&lt;/em&gt; parameter to &lt;tt class=&quot;docutils literal&quot;&gt;start_replication()&lt;/tt&gt; method and other facilities to send automatic replication keepalives at periodic intervals (&lt;a class=&quot;reference external&quot; href=&quot;https://github.com/psycopg/psycopg2/issues/913&quot;&gt;ticket #913&lt;/a&gt;).&lt;/li&gt;
&lt;li&gt;Fixed namedtuples caching introduced in 2.8 (&lt;a class=&quot;reference external&quot; href=&quot;https://github.com/psycopg/psycopg2/issues/928&quot;&gt;ticket #928&lt;/a&gt;).&lt;/li&gt;
&lt;/ul&gt;
</content>
  </entry>
  <entry xml:base="https://www.psycopg.org/articles/2019/04/14/psycopg-281-282-released/">
    <title type="text">Psycopg 2.8.1, 2.8.2 released</title>
    <id>urn:uuid:2610031e-9967-3432-9994-850279530a66</id>
    <updated>2019-04-14T00:00:00Z</updated>
    <link href="https://www.psycopg.org/articles/2019/04/14/psycopg-281-282-released/" />
    <author>
      <name>Daniele Varrazzo</name>
    </author>
    <content type="html">&lt;p&gt;Hello,&lt;/p&gt;
&lt;p&gt;We have just released Psycopg 2.8.2; a few days ago Psycopg 2.8.1 was released.&lt;/p&gt;
&lt;p&gt;Some of the bugs addressed are ordinary teething problem with the 2.8
release, but an important change landed with 2.8.2: binary packages
now ship with OpenSSL 1.1 instead of 1.0. This should fix concurrency
problems on connection experienced both on Windows and Linux. Many
thanks to Matthew Brett and Jason Erickson for this improvement!&lt;/p&gt;
&lt;!-- CUT-HERE --&gt;
&lt;p&gt;The combined list of changes is:&lt;/p&gt;
&lt;ul class=&quot;simple&quot;&gt;
&lt;li&gt;Fixed &amp;quot;there's no async cursor&amp;quot; error polling a connection with no cursor
(&lt;a class=&quot;reference external&quot; href=&quot;https://github.com/psycopg/psycopg2/issues/887&quot;&gt;ticket #887&lt;/a&gt;).&lt;/li&gt;
&lt;li&gt;Fixed &lt;tt class=&quot;docutils literal&quot;&gt;RealDictCursor&lt;/tt&gt; when there are repeated columns (&lt;a class=&quot;reference external&quot; href=&quot;https://github.com/psycopg/psycopg2/issues/884&quot;&gt;ticket #884&lt;/a&gt;).&lt;/li&gt;
&lt;li&gt;Fixed &lt;tt class=&quot;docutils literal&quot;&gt;RealDictRow&lt;/tt&gt; modifiability (&lt;a class=&quot;reference external&quot; href=&quot;https://github.com/psycopg/psycopg2/issues/886&quot;&gt;ticket #886&lt;/a&gt;).&lt;/li&gt;
&lt;li&gt;Binary packages built with OpenSSL 1.1.1b. Should fix concurrency problems
(&lt;a class=&quot;reference external&quot; href=&quot;https://github.com/psycopg/psycopg2/issues/543&quot;&gt;ticket #543&lt;/a&gt;, &lt;a class=&quot;reference external&quot; href=&quot;https://github.com/psycopg/psycopg2/issues/836&quot;&gt;ticket #836&lt;/a&gt;).&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Happy hacking!&lt;/p&gt;
</content>
  </entry>
  <entry xml:base="https://www.psycopg.org/articles/2019/04/04/psycopg-28-released/">
    <title type="text">Psycopg 2.8 released</title>
    <id>urn:uuid:fd2fe9e9-3999-372a-9cf3-18c2c7efd83e</id>
    <updated>2019-04-04T00:00:00Z</updated>
    <link href="https://www.psycopg.org/articles/2019/04/04/psycopg-28-released/" />
    <author>
      <name>Daniele Varrazzo</name>
    </author>
    <content type="html">&lt;p&gt;After about two years from the previous major release, psycopg 2.8 is finally here!&lt;/p&gt;
&lt;p&gt;Among the highlights, &lt;a class=&quot;reference external&quot; href=&quot;/docs/errors.html&quot;&gt;PostgreSQL errors are now mapped to Python exceptions&lt;/a&gt; for a more idiomatic way to handle them. Several additions allow a better insight of the &lt;a class=&quot;reference external&quot; href=&quot;/docs/extensions.html#psycopg2.extensions.ConnectionInfo&quot;&gt;connection status&lt;/a&gt; and &lt;a class=&quot;reference external&quot; href=&quot;/docs/extensions.html#psycopg2.extensions.Column&quot;&gt;query results&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Behind the scene, asynchronous communication and concurrency received several improvements, and dropping support for older versions of Python gave the chance to refactor and modernise the codebase (with the especial help from Jon Dufresne who ruthlessly butchered our code into a streamlined pulp).&lt;/p&gt;
&lt;p&gt;Thank you very much to everyone contributing so far. Happy hacking!&lt;/p&gt;
&lt;!-- CUT-HERE --&gt;
&lt;p&gt;You can download as usual from the canonical urls:&lt;/p&gt;
&lt;ul class=&quot;simple&quot;&gt;
&lt;li&gt;&lt;a class=&quot;reference external&quot; href=&quot;https://pypi.org/packages/source/p/psycopg2/psycopg2-2.8.tar.gz&quot;&gt;source package&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class=&quot;reference external&quot; href=&quot;https://pypi.org/packages/source/p/psycopg2/psycopg2-2.8.tar.gz.asc&quot;&gt;signature&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Or just use &lt;tt class=&quot;docutils literal&quot;&gt;pip&lt;/tt&gt;:&lt;/p&gt;
&lt;pre class=&quot;literal-block&quot;&gt;
pip install psycopg2
&lt;/pre&gt;
&lt;p&gt;New features:&lt;/p&gt;
&lt;ul class=&quot;simple&quot;&gt;
&lt;li&gt;Added &lt;tt class=&quot;docutils literal&quot;&gt;errors&lt;/tt&gt; module. Every PostgreSQL error is converted into a specific exception class (&lt;a class=&quot;reference external&quot; href=&quot;https://github.com/psycopg/psycopg2/issues/682&quot;&gt;ticket #682&lt;/a&gt;).&lt;/li&gt;
&lt;li&gt;Added &lt;tt class=&quot;docutils literal&quot;&gt;encrypt_password()&lt;/tt&gt; function (&lt;a class=&quot;reference external&quot; href=&quot;https://github.com/psycopg/psycopg2/issues/576&quot;&gt;ticket #576&lt;/a&gt;).&lt;/li&gt;
&lt;li&gt;Added &lt;tt class=&quot;docutils literal&quot;&gt;BYTES&lt;/tt&gt; adapter to manage databases with mixed encodings on Python 3 (&lt;a class=&quot;reference external&quot; href=&quot;https://github.com/psycopg/psycopg2/issues/835&quot;&gt;ticket #835&lt;/a&gt;).&lt;/li&gt;
&lt;li&gt;Added &lt;tt class=&quot;docutils literal&quot;&gt;table_oid&lt;/tt&gt; and &lt;tt class=&quot;docutils literal&quot;&gt;table_column&lt;/tt&gt; attributes on &lt;tt class=&quot;docutils literal&quot;&gt;cursor.description&lt;/tt&gt; items (&lt;a class=&quot;reference external&quot; href=&quot;https://github.com/psycopg/psycopg2/issues/661&quot;&gt;ticket #661&lt;/a&gt;).&lt;/li&gt;
&lt;li&gt;Added &lt;tt class=&quot;docutils literal&quot;&gt;connection.info&lt;/tt&gt; object to retrieve various PostgreSQL connection information (&lt;a class=&quot;reference external&quot; href=&quot;https://github.com/psycopg/psycopg2/issues/726&quot;&gt;ticket #726&lt;/a&gt;).&lt;/li&gt;
&lt;li&gt;Added &lt;tt class=&quot;docutils literal&quot;&gt;get_native_connection()&lt;/tt&gt; to expose the raw &lt;tt class=&quot;docutils literal&quot;&gt;PGconn&lt;/tt&gt; structure to C extensions via Capsule (&lt;a class=&quot;reference external&quot; href=&quot;https://github.com/psycopg/psycopg2/issues/782&quot;&gt;ticket #782&lt;/a&gt;).&lt;/li&gt;
&lt;li&gt;Added &lt;tt class=&quot;docutils literal&quot;&gt;pgconn_ptr&lt;/tt&gt; and &lt;tt class=&quot;docutils literal&quot;&gt;pgresult_ptr&lt;/tt&gt; to expose raw C structures to Python and interact with libpq via ctypes (&lt;a class=&quot;reference external&quot; href=&quot;https://github.com/psycopg/psycopg2/issues/782&quot;&gt;ticket #782&lt;/a&gt;).&lt;/li&gt;
&lt;li&gt;&lt;tt class=&quot;docutils literal&quot;&gt;sql.Identifier&lt;/tt&gt; can represent qualified names in SQL composition (&lt;a class=&quot;reference external&quot; href=&quot;https://github.com/psycopg/psycopg2/issues/732&quot;&gt;ticket #732&lt;/a&gt;).&lt;/li&gt;
&lt;li&gt;Added &lt;tt class=&quot;docutils literal&quot;&gt;ReplicationCursor.wal_end&lt;/tt&gt; attribute (&lt;a class=&quot;reference external&quot; href=&quot;https://github.com/psycopg/psycopg2/issues/800&quot;&gt;ticket #800&lt;/a&gt;).&lt;/li&gt;
&lt;li&gt;Added &lt;em&gt;fetch&lt;/em&gt; parameter to &lt;tt class=&quot;docutils literal&quot;&gt;execute_values()&lt;/tt&gt; function (&lt;a class=&quot;reference external&quot; href=&quot;https://github.com/psycopg/psycopg2/issues/813&quot;&gt;ticket #813&lt;/a&gt;).&lt;/li&gt;
&lt;li&gt;&lt;tt class=&quot;docutils literal&quot;&gt;str()&lt;/tt&gt; on &lt;tt class=&quot;docutils literal&quot;&gt;Range&lt;/tt&gt; produces a human-readable representation (&lt;a class=&quot;reference external&quot; href=&quot;https://github.com/psycopg/psycopg2/issues/773&quot;&gt;ticket #773&lt;/a&gt;).&lt;/li&gt;
&lt;li&gt;&lt;tt class=&quot;docutils literal&quot;&gt;DictCursor&lt;/tt&gt; and &lt;tt class=&quot;docutils literal&quot;&gt;RealDictCursor&lt;/tt&gt; rows maintain columns order (&lt;a class=&quot;reference external&quot; href=&quot;https://github.com/psycopg/psycopg2/issues/177&quot;&gt;ticket #177&lt;/a&gt;).&lt;/li&gt;
&lt;li&gt;Added &lt;tt class=&quot;docutils literal&quot;&gt;severity_nonlocalized&lt;/tt&gt; attribute on the &lt;tt class=&quot;docutils literal&quot;&gt;Diagnostics&lt;/tt&gt; object (&lt;a class=&quot;reference external&quot; href=&quot;https://github.com/psycopg/psycopg2/issues/783&quot;&gt;ticket #783&lt;/a&gt;).&lt;/li&gt;
&lt;li&gt;More efficient &lt;tt class=&quot;docutils literal&quot;&gt;NamedTupleCursor&lt;/tt&gt; (&lt;a class=&quot;reference external&quot; href=&quot;https://github.com/psycopg/psycopg2/issues/838&quot;&gt;ticket #838&lt;/a&gt;).&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Bug fixes:&lt;/p&gt;
&lt;ul class=&quot;simple&quot;&gt;
&lt;li&gt;Fixed connections occasionally broken by the unrelated use of the multiprocessing module (&lt;a class=&quot;reference external&quot; href=&quot;https://github.com/psycopg/psycopg2/issues/829&quot;&gt;ticket #829&lt;/a&gt;).&lt;/li&gt;
&lt;li&gt;Fixed async communication blocking if results are returned in different chunks, e.g. with notices interspersed to the results (&lt;a class=&quot;reference external&quot; href=&quot;https://github.com/psycopg/psycopg2/issues/856&quot;&gt;ticket #856&lt;/a&gt;).&lt;/li&gt;
&lt;li&gt;Fixed adaptation of numeric subclasses such as &lt;tt class=&quot;docutils literal&quot;&gt;IntEnum&lt;/tt&gt; (&lt;a class=&quot;reference external&quot; href=&quot;https://github.com/psycopg/psycopg2/issues/591&quot;&gt;ticket #591&lt;/a&gt;).&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Other changes:&lt;/p&gt;
&lt;ul class=&quot;simple&quot;&gt;
&lt;li&gt;Dropped support for Python 2.6, 3.2, 3.3.&lt;/li&gt;
&lt;li&gt;Dropped &lt;tt class=&quot;docutils literal&quot;&gt;psycopg1&lt;/tt&gt; module.&lt;/li&gt;
&lt;li&gt;Dropped deprecated &lt;tt class=&quot;docutils literal&quot;&gt;register_tstz_w_secs()&lt;/tt&gt; (was previously a no-op).&lt;/li&gt;
&lt;li&gt;Dropped deprecated &lt;tt class=&quot;docutils literal&quot;&gt;PersistentConnectionPool&lt;/tt&gt;. This pool class was mostly
designed to interact with Zope. Use &lt;tt class=&quot;docutils literal&quot;&gt;ZPsycopgDA.pool&lt;/tt&gt; instead.&lt;/li&gt;
&lt;li&gt;Binary packages no longer installed by default. The &lt;tt class=&quot;docutils literal&quot;&gt;&lt;span class=&quot;pre&quot;&gt;psycopg2-binary&lt;/span&gt;&lt;/tt&gt; package must be used explicitly.&lt;/li&gt;
&lt;li&gt;Dropped &lt;tt class=&quot;docutils literal&quot;&gt;PSYCOPG_DISPLAY_SIZE&lt;/tt&gt; build parameter.&lt;/li&gt;
&lt;li&gt;Dropped support for mxDateTime as the default date and time adapter. mxDatetime support continues to be available as an alternative to Python's builtin datetime.&lt;/li&gt;
&lt;li&gt;No longer use 2to3 during installation for Python 2 &amp;amp; 3 compatibility. All source files are now compatible with Python 2 &amp;amp; 3 as is.&lt;/li&gt;
&lt;li&gt;The &lt;tt class=&quot;docutils literal&quot;&gt;psycopg2.test&lt;/tt&gt; package is no longer installed by &lt;tt class=&quot;docutils literal&quot;&gt;python setup.py install&lt;/tt&gt;.&lt;/li&gt;
&lt;li&gt;Wheel package compiled against OpenSSL 1.0.2r and PostgreSQL 11.2 libpq.&lt;/li&gt;
&lt;/ul&gt;
</content>
  </entry>
  <entry xml:base="https://www.psycopg.org/articles/2018/06/17/psycopg-275-released/">
    <title type="text">Psycopg 2.7.5 released</title>
    <id>urn:uuid:6dea8ed1-f58e-313f-904c-1e0b4f77414a</id>
    <updated>2018-06-17T00:00:00Z</updated>
    <link href="https://www.psycopg.org/articles/2018/06/17/psycopg-275-released/" />
    <author>
      <name>Daniele Varrazzo</name>
    </author>
    <content type="html">&lt;p&gt;psycopg2 version 2.7.5 has been released, fixing a few bugs found in the last months:&lt;/p&gt;
&lt;!-- CUT-HERE --&gt;
&lt;p&gt;Summary of changes:&lt;/p&gt;
&lt;ul class=&quot;simple&quot;&gt;
&lt;li&gt;Allow non-ascii chars in namedtuple fields (regression introduced fixing &lt;a class=&quot;reference external&quot; href=&quot;https://github.com/psycopg/psycopg2/issues/211&quot;&gt;ticket #211&lt;/a&gt;).&lt;/li&gt;
&lt;li&gt;Fixed adaptation of arrays of arrays of nulls (&lt;a class=&quot;reference external&quot; href=&quot;https://github.com/psycopg/psycopg2/issues/325&quot;&gt;ticket #325&lt;/a&gt;).&lt;/li&gt;
&lt;li&gt;Fixed building on Solaris 11 and derivatives such as SmartOS and illumos (&lt;a class=&quot;reference external&quot; href=&quot;https://github.com/psycopg/psycopg2/issues/677&quot;&gt;ticket #677&lt;/a&gt;).&lt;/li&gt;
&lt;li&gt;Maybe fixed building on MSYS2 (as reported in &lt;a class=&quot;reference external&quot; href=&quot;https://github.com/psycopg/psycopg2/issues/658&quot;&gt;ticket #658&lt;/a&gt;).&lt;/li&gt;
&lt;li&gt;Allow string subclasses in connection and other places (&lt;a class=&quot;reference external&quot; href=&quot;https://github.com/psycopg/psycopg2/issues/679&quot;&gt;ticket #679&lt;/a&gt;).&lt;/li&gt;
&lt;li&gt;Don't raise an exception closing an unused named cursor (&lt;a class=&quot;reference external&quot; href=&quot;https://github.com/psycopg/psycopg2/issues/716&quot;&gt;ticket #716&lt;/a&gt;).&lt;/li&gt;
&lt;li&gt;Wheel package compiled against PostgreSQL 10.4 libpq and OpenSSL 1.0.2o.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;You can install psycopg2 &lt;a class=&quot;reference external&quot; href=&quot;https://pypi.python.org/pypi/psycopg2&quot;&gt;from PyPI&lt;/a&gt; or grab the new code from:&lt;/p&gt;
&lt;ul class=&quot;simple&quot;&gt;
&lt;li&gt;&lt;a class=&quot;reference external&quot; href=&quot;https://pypi.org/packages/source/p/psycopg2/psycopg2-2.7.5.tar.gz&quot;&gt;source package&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class=&quot;reference external&quot; href=&quot;https://pypi.org/packages/source/p/psycopg2/psycopg2-2.7.5.tar.gz.asc&quot;&gt;signature&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Happy hacking!&lt;/p&gt;
</content>
  </entry>
  <entry xml:base="https://www.psycopg.org/articles/2018/02/08/psycopg-274-released/">
    <title type="text">Psycopg 2.7.4 released</title>
    <id>urn:uuid:068b0a9f-67be-322d-9ac4-3b8444c8d0de</id>
    <updated>2018-02-08T00:00:00Z</updated>
    <link href="https://www.psycopg.org/articles/2018/02/08/psycopg-274-released/" />
    <author>
      <name>Daniele Varrazzo</name>
    </author>
    <content type="html">&lt;p&gt;We have released Psycopg version 2.7.4, bringing a few bug fixes... and working out the problem with Wheel packages.&lt;/p&gt;
&lt;!-- CUT-HERE --&gt;
&lt;div class=&quot;section&quot; id=&quot;what-s-the-problem-with-wheels&quot;&gt;
&lt;h2&gt;What's the problem with Wheels?&lt;/h2&gt;
&lt;p&gt;&lt;a class=&quot;reference external&quot; href=&quot;https://pythonwheels.com/&quot;&gt;Wheel packages&lt;/a&gt; are a Python standard to distribute self-contained binary package. They are especially convenient for packages containing C extensions, such as Psycopg, and for packages depending on external C libraries... such as Psycopg, because the package will contain a binary, pre-compiled, version of the C extension and all the depending libraries (excluding a list of libraries expected to be found on any system and with a versioned ABI, such as libc). Since the release of the wheel packages with &lt;a class=&quot;reference external&quot; href=&quot;/articles/2017/03/01/psycopg-27-released/&quot;&gt;psycopg 2.7&lt;/a&gt; it has been possible to install Psycopg without the &lt;a class=&quot;reference external&quot; href=&quot;/docs/install.html#build-prerequisites&quot;&gt;prerequisites&lt;/a&gt; of a C compiler and of Python/Postgres dev packages at build time, and the need of a system libpq at runtime.&lt;/p&gt;
&lt;p&gt;Unfortunately, after the packages were released, &lt;a class=&quot;reference external&quot; href=&quot;https://github.com/psycopg/psycopg2/issues/543&quot;&gt;it was reported&lt;/a&gt; of occasional segfaults of Python processes using Psycopg from the Wheel package. This was traced to the use of the Python &lt;tt class=&quot;docutils literal&quot;&gt;ssl&lt;/tt&gt; library concurrently with Psycopg opening connections, for instance in a multithread program opening concurrently &lt;tt class=&quot;docutils literal&quot;&gt;https&lt;/tt&gt; resources and database connections. The problem seems caused by a non-reentrant OpenSSL initialization function (unfortunately invoked by libpq at every connection) and the fact that the Python process ends up binding two different versions of the &lt;tt class=&quot;docutils literal&quot;&gt;libssl&lt;/tt&gt; library: the system one via the Python &lt;tt class=&quot;docutils literal&quot;&gt;ssl&lt;/tt&gt; library (e.g. imported by &lt;tt class=&quot;docutils literal&quot;&gt;urllib&lt;/tt&gt; or &lt;tt class=&quot;docutils literal&quot;&gt;requests&lt;/tt&gt;) and the Wheel one imported by the &lt;tt class=&quot;docutils literal&quot;&gt;libpq&lt;/tt&gt;, in turn imported by &lt;tt class=&quot;docutils literal&quot;&gt;psycopg2&lt;/tt&gt;.&lt;/p&gt;
&lt;p&gt;While the problem doesn't affect many users, a library behaving unreliably in combination with part of the stdlib is a situation less than optimal. The workaround is to force installing Psycopg from source, but this must be specified explicitly in the project dependencies (e.g. using the &lt;tt class=&quot;docutils literal&quot;&gt;&lt;span class=&quot;pre&quot;&gt;--no-binary&lt;/span&gt;&lt;/tt&gt; flag in the &lt;tt class=&quot;docutils literal&quot;&gt;pip&lt;/tt&gt; command line or in the &lt;tt class=&quot;docutils literal&quot;&gt;requirements.txt&lt;/tt&gt; file); the Python packaging system doesn't really have a way to declare something like &amp;quot;install a package preferably from source&amp;quot;... so we had to create one ourselves.&lt;/p&gt;
&lt;p&gt;Starting with Psycopg 2.7.4, we are releasing two different packages on PyPI: &lt;a class=&quot;reference external&quot; href=&quot;https://pypi.python.org/pypi/psycopg2/&quot;&gt;psycopg2&lt;/a&gt; and &lt;a class=&quot;reference external&quot; href=&quot;https://pypi.python.org/pypi/psycopg2-binary/&quot;&gt;psycopg2-binary&lt;/a&gt;. The latter is a Wheels-only package, with a behaviour identical to the classic one – the different name is used only in installation (it is installed by &lt;tt class=&quot;docutils literal&quot;&gt;pip install &lt;span class=&quot;pre&quot;&gt;psycopg2-binary&lt;/span&gt;&lt;/tt&gt;, but still imported with &lt;tt class=&quot;docutils literal&quot;&gt;import psycopg2&lt;/tt&gt; in Python).&lt;/p&gt;
&lt;p&gt;For the lifespan of the Psycopg 2.7 cycle, the &lt;tt class=&quot;docutils literal&quot;&gt;psycopg2&lt;/tt&gt; PyPI package will still contain wheel packages, but starting from Psycopg 2.8 it will become again a source-only package. Starting from Psycopg 2.7.4, if the package is installed as binary from the &lt;tt class=&quot;docutils literal&quot;&gt;psycopg2&lt;/tt&gt; PyPI entry, a warning will be reported on import:&lt;/p&gt;
&lt;blockquote&gt;
The psycopg2 wheel package will be renamed from release 2.8; in order to keep installing from binary please use &amp;quot;pip install psycopg2-binary&amp;quot; instead. For details see: &amp;lt;/docs/install.html#binary-install-from-pypi&amp;gt;.&lt;/blockquote&gt;
&lt;p&gt;The choices for the users are then two:&lt;/p&gt;
&lt;ul class=&quot;simple&quot;&gt;
&lt;li&gt;if the program works fine with the Wheel packages, and the convenience of the binary distribution is preferred, it is possible to &lt;a class=&quot;reference external&quot; href=&quot;/docs/install.html#binary-install-from-pypi&quot;&gt;specify the dependency on the binary package&lt;/a&gt; using the &lt;tt class=&quot;docutils literal&quot;&gt;&lt;span class=&quot;pre&quot;&gt;psycopg2-binary&lt;/span&gt;&lt;/tt&gt; instead of the &lt;tt class=&quot;docutils literal&quot;&gt;psycopg2&lt;/tt&gt; PyPI package. No change to the program code is needed;&lt;/li&gt;
&lt;li&gt;if there are concerns about the unreliability of the Wheels package, it is adviced to &lt;a class=&quot;reference external&quot; href=&quot;/docs/install.html#disabling-wheel-packages-for-psycopg-2-7&quot;&gt;force installation from source&lt;/a&gt;. This requires the presence of build tools and runtime libraries on the client, but again it requires no change to the code.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;We hope this solution will suggest the default use of a reliable version of the library, while still allowing the convenience of a dependencies-free package. Feedback is welcome on the &lt;a class=&quot;reference external&quot; href=&quot;https://www.postgresql.org/list/psycopg/&quot;&gt;mailing list&lt;/a&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;section&quot; id=&quot;other-changes-in-this-version&quot;&gt;
&lt;h2&gt;Other changes in this version&lt;/h2&gt;
&lt;ul class=&quot;simple&quot;&gt;
&lt;li&gt;Convert fields names into valid Python identifiers in
&lt;tt class=&quot;docutils literal&quot;&gt;NamedTupleCursor&lt;/tt&gt; (&lt;a class=&quot;reference external&quot; href=&quot;https://github.com/psycopg/psycopg2/issues/211&quot;&gt;ticket #211&lt;/a&gt;).&lt;/li&gt;
&lt;li&gt;Fixed Solaris 10 support (&lt;a class=&quot;reference external&quot; href=&quot;https://github.com/psycopg/psycopg2/issues/532&quot;&gt;ticket #532&lt;/a&gt;).&lt;/li&gt;
&lt;li&gt;&lt;tt class=&quot;docutils literal&quot;&gt;cursor.mogrify()&lt;/tt&gt; can be called on closed cursors (&lt;a class=&quot;reference external&quot; href=&quot;https://github.com/psycopg/psycopg2/issues/579&quot;&gt;ticket #579&lt;/a&gt;).&lt;/li&gt;
&lt;li&gt;Fixed setting session characteristics in corner cases on autocommit
connections (&lt;a class=&quot;reference external&quot; href=&quot;https://github.com/psycopg/psycopg2/issues/580&quot;&gt;ticket #580&lt;/a&gt;).&lt;/li&gt;
&lt;li&gt;Fixed &lt;tt class=&quot;docutils literal&quot;&gt;MinTimeLoggingCursor&lt;/tt&gt; on Python 3 (&lt;a class=&quot;reference external&quot; href=&quot;https://github.com/psycopg/psycopg2/issues/609&quot;&gt;ticket #609&lt;/a&gt;).&lt;/li&gt;
&lt;li&gt;Fixed parsing of array of points as floats (&lt;a class=&quot;reference external&quot; href=&quot;https://github.com/psycopg/psycopg2/issues/613&quot;&gt;ticket #613&lt;/a&gt;).&lt;/li&gt;
&lt;li&gt;Fixed &lt;tt class=&quot;docutils literal&quot;&gt;__libpq_version__&lt;/tt&gt; building with libpq &amp;gt;= 10.1
(&lt;a class=&quot;reference external&quot; href=&quot;https://github.com/psycopg/psycopg2/issues/632&quot;&gt;ticket 632&lt;/a&gt;).&lt;/li&gt;
&lt;li&gt;Fixed &lt;tt class=&quot;docutils literal&quot;&gt;rowcount&lt;/tt&gt; after &lt;tt class=&quot;docutils literal&quot;&gt;executemany()&lt;/tt&gt; with &lt;tt class=&quot;docutils literal&quot;&gt;RETURNING&lt;/tt&gt;
statements (&lt;a class=&quot;reference external&quot; href=&quot;https://github.com/psycopg/psycopg2/issues/633&quot;&gt;ticket 633&lt;/a&gt;).&lt;/li&gt;
&lt;li&gt;Fixed compatibility problem with pypy3 (&lt;a class=&quot;reference external&quot; href=&quot;https://github.com/psycopg/psycopg2/issues/649&quot;&gt;ticket #649&lt;/a&gt;).&lt;/li&gt;
&lt;li&gt;Wheel packages compiled against PostgreSQL 10.1 libpq and OpenSSL 1.0.2n.&lt;/li&gt;
&lt;li&gt;Wheel packages for Python 2.6 no more available (support dropped from
wheel building infrastructure).&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
</content>
  </entry>
  <entry xml:base="https://www.psycopg.org/articles/2017/10/24/psycopg-2732-released/">
    <title type="text">Psycopg 2.7.3.2 released</title>
    <id>urn:uuid:5103d367-2299-3e5f-b726-e662eeab35bb</id>
    <updated>2017-10-24T00:00:00Z</updated>
    <link href="https://www.psycopg.org/articles/2017/10/24/psycopg-2732-released/" />
    <author>
      <name>Daniele Varrazzo</name>
    </author>
    <content type="html">&lt;p&gt;Following the release of &lt;a class=&quot;reference external&quot; href=&quot;https://www.postgresql.org/about/news/1786/&quot;&gt;PostgreSQL 10&lt;/a&gt; we have released new binary packages as Psycopg 2.7.3.2. There are no code changes from Psycopg 2.7.3, but the new binary packages ship with the PostgreSQL 10 client library, enabling the use of new features such as &lt;a class=&quot;reference external&quot; href=&quot;http://paquier.xyz/postgresql-2/postgres-10-multi-host-connstr/&quot;&gt;multiple hosts in connection string&lt;/a&gt;, &lt;a class=&quot;reference external&quot; href=&quot;http://paquier.xyz/postgresql-2/postgres-10-libpq-read-write/&quot;&gt;read-only mode&lt;/a&gt;, &lt;a class=&quot;reference external&quot; href=&quot;https://www.postgresql.org/docs/10/static/sasl-authentication.html#sasl-scram-sha256&quot;&gt;SCRAM-SHA-256 authentication&lt;/a&gt;.&lt;/p&gt;
&lt;!-- CUT-HERE --&gt;
&lt;p&gt;The packages are already &lt;a class=&quot;reference external&quot; href=&quot;https://pypi.python.org/pypi/psycopg2/2.7.3.2&quot;&gt;available on PyPI&lt;/a&gt; and automatically installed by &lt;tt class=&quot;docutils literal&quot;&gt;pip install psycopg2&lt;/tt&gt; (if your pip is up-to-date). You can grab the source code from:&lt;/p&gt;
&lt;ul class=&quot;simple&quot;&gt;
&lt;li&gt;&lt;a class=&quot;reference external&quot; href=&quot;https://pypi.org/packages/source/p/psycopg2/psycopg2-2.7.3.2.tar.gz&quot;&gt;source package&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class=&quot;reference external&quot; href=&quot;https://pypi.org/packages/source/p/psycopg2/psycopg2-2.7.3.2.tar.gz.asc&quot;&gt;signature&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Happy hacking!&lt;/p&gt;
</content>
  </entry>
  <entry xml:base="https://www.psycopg.org/articles/2017/08/26/psycopg-2731-released/">
    <title type="text">Psycopg 2.7.3.1 released</title>
    <id>urn:uuid:42ce0e40-cba4-3b5f-bc0d-556685759a03</id>
    <updated>2017-08-26T00:00:00Z</updated>
    <link href="https://www.psycopg.org/articles/2017/08/26/psycopg-2731-released/" />
    <author>
      <name>Daniele Varrazzo</name>
    </author>
    <content type="html">&lt;p&gt;We have released psycopg2 release 2.7.3.1 as a new build of psycopg 2.7.3. The new build only affects the wheel packages and contains no change in the code.&lt;/p&gt;
&lt;p&gt;The release 2.7.3.1 fixes &lt;a class=&quot;reference external&quot; href=&quot;https://github.com/psycopg/psycopg2-wheels/issues/2&quot;&gt;psycopg2-wheels bug #2&lt;/a&gt; which was in turn caused by &lt;a class=&quot;reference external&quot; href=&quot;https://github.com/pypa/auditwheel/issues/80&quot;&gt;auditwheel bug #80&lt;/a&gt;, resulting in incompatibility with glibc 2.26. The problem only affects Linux wheels users, it doesn't affect Windows, OSX, or user installing psycopg2 from source.&lt;/p&gt;
&lt;!-- CUT-HERE --&gt;
&lt;p&gt;You can install psycopg2 &lt;a class=&quot;reference external&quot; href=&quot;https://pypi.python.org/pypi/psycopg2&quot;&gt;from PyPI&lt;/a&gt; or grab the new code from:&lt;/p&gt;
&lt;ul class=&quot;simple&quot;&gt;
&lt;li&gt;&lt;a class=&quot;reference external&quot; href=&quot;https://pypi.org/packages/source/p/psycopg2/psycopg2-2.7.3.1.tar.gz&quot;&gt;source package&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class=&quot;reference external&quot; href=&quot;https://pypi.org/packages/source/p/psycopg2/psycopg2-2.7.3.1.tar.gz.asc&quot;&gt;signature&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</content>
  </entry>
  <entry xml:base="https://www.psycopg.org/articles/2017/07/24/psycopg-273-released/">
    <title type="text">Psycopg 2.7.3 released</title>
    <id>urn:uuid:d57822f6-3d2a-342c-a052-23bfa9928cff</id>
    <updated>2017-07-24T00:00:00Z</updated>
    <link href="https://www.psycopg.org/articles/2017/07/24/psycopg-273-released/" />
    <author>
      <name>Daniele Varrazzo</name>
    </author>
    <content type="html">&lt;p&gt;A quick release to fix a regression found in &lt;a class=&quot;reference external&quot; href=&quot;/psycopg/articles/2017/07/22/psycopg-272-released/&quot;&gt;psycopg 2.7.2&lt;/a&gt;:&lt;/p&gt;
&lt;ul class=&quot;simple&quot;&gt;
&lt;li&gt;Restored default &lt;tt class=&quot;docutils literal&quot;&gt;timestamptz[]&lt;/tt&gt; typecasting to Python &lt;tt class=&quot;docutils literal&quot;&gt;datetime&lt;/tt&gt;.
Regression introduced in Psycopg 2.7.2 (&lt;a class=&quot;reference external&quot; href=&quot;https://github.com/psycopg/psycopg2/issues/578&quot;&gt;ticket #578&lt;/a&gt;).&lt;/li&gt;
&lt;/ul&gt;
&lt;!-- CUT-HERE --&gt;
&lt;p&gt;You can install psycopg2 &lt;a class=&quot;reference external&quot; href=&quot;https://pypi.python.org/pypi/psycopg2&quot;&gt;from PyPI&lt;/a&gt; or grab the new code from:&lt;/p&gt;
&lt;ul class=&quot;simple&quot;&gt;
&lt;li&gt;&lt;a class=&quot;reference external&quot; href=&quot;https://pypi.org/packages/source/p/psycopg2/psycopg2-2.7.3.tar.gz&quot;&gt;source package&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class=&quot;reference external&quot; href=&quot;https://pypi.org/packages/source/p/psycopg2/psycopg2-2.7.3.tar.gz.asc&quot;&gt;signature&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Happy hacking!&lt;/p&gt;
</content>
  </entry>
  <entry xml:base="https://www.psycopg.org/articles/2017/07/22/psycopg-272-released/">
    <title type="text">Psycopg 2.7.2 released</title>
    <id>urn:uuid:1b046e55-ea47-3cb3-8f58-b7b9ff97ea93</id>
    <updated>2017-07-22T00:00:00Z</updated>
    <link href="https://www.psycopg.org/articles/2017/07/22/psycopg-272-released/" />
    <author>
      <name>Daniele Varrazzo</name>
    </author>
    <content type="html">&lt;p&gt;Releasing psycopg2 version 2.7.2: a release fixing a host of bugs found in the last 3-4 months.&lt;/p&gt;
&lt;!-- CUT-HERE --&gt;
&lt;p&gt;Summary of changes:&lt;/p&gt;
&lt;ul class=&quot;simple&quot;&gt;
&lt;li&gt;Fixed inconsistent state in externally closed connections (&lt;a class=&quot;reference external&quot; href=&quot;https://github.com/psycopg/psycopg2/issues/263&quot;&gt;ticket #263&lt;/a&gt;, &lt;a class=&quot;reference external&quot; href=&quot;https://github.com/psycopg/psycopg2/issues/311&quot;&gt;ticket #311&lt;/a&gt;, &lt;a class=&quot;reference external&quot; href=&quot;https://github.com/psycopg/psycopg2/issues/443&quot;&gt;ticket #443&lt;/a&gt;). Was fixed in 2.6.2 but not included in 2.7 by mistake.&lt;/li&gt;
&lt;li&gt;Fixed Python exceptions propagation in green callback (&lt;a class=&quot;reference external&quot; href=&quot;https://github.com/psycopg/psycopg2/issues/410&quot;&gt;ticket #410&lt;/a&gt;).&lt;/li&gt;
&lt;li&gt;Don't display the password in &lt;tt class=&quot;docutils literal&quot;&gt;connection.dsn&lt;/tt&gt; when the connection string is specified as an URI (&lt;a class=&quot;reference external&quot; href=&quot;https://github.com/psycopg/psycopg2/issues/528&quot;&gt;ticket #528&lt;/a&gt;).&lt;/li&gt;
&lt;li&gt;Return objects with timezone parsing &amp;quot;infinity&amp;quot; &lt;tt class=&quot;docutils literal&quot;&gt;timestamptz&lt;/tt&gt; (&lt;a class=&quot;reference external&quot; href=&quot;https://github.com/psycopg/psycopg2/issues/536&quot;&gt;ticket #536&lt;/a&gt;).&lt;/li&gt;
&lt;li&gt;Dropped dependency on VC9 runtime on Windows binary packages (&lt;a class=&quot;reference external&quot; href=&quot;https://github.com/psycopg/psycopg2/issues/541&quot;&gt;ticket #541&lt;/a&gt;).&lt;/li&gt;
&lt;li&gt;Fixed segfault in &lt;tt class=&quot;docutils literal&quot;&gt;lobject()&lt;/tt&gt; when &lt;em&gt;mode&lt;/em&gt;=&lt;tt class=&quot;docutils literal&quot;&gt;None&lt;/tt&gt; (&lt;a class=&quot;reference external&quot; href=&quot;https://github.com/psycopg/psycopg2/issues/544&quot;&gt;ticket #544&lt;/a&gt;).&lt;/li&gt;
&lt;li&gt;Fixed &lt;tt class=&quot;docutils literal&quot;&gt;lobject()&lt;/tt&gt; keyword argument &lt;em&gt;lobject_factory&lt;/em&gt; (&lt;a class=&quot;reference external&quot; href=&quot;https://github.com/psycopg/psycopg2/issues/545&quot;&gt;ticket #545&lt;/a&gt;).&lt;/li&gt;
&lt;li&gt;Fixed &lt;tt class=&quot;docutils literal&quot;&gt;ReplicationCursor.consume_stream()&lt;/tt&gt; &lt;em&gt;keepalive_interval&lt;/em&gt; argument (&lt;a class=&quot;reference external&quot; href=&quot;https://github.com/psycopg/psycopg2/issues/547&quot;&gt;ticket #547&lt;/a&gt;).&lt;/li&gt;
&lt;li&gt;Maybe fixed random import error on Python 3.6 in multiprocess environment (&lt;a class=&quot;reference external&quot; href=&quot;https://github.com/psycopg/psycopg2/issues/550&quot;&gt;ticket #550&lt;/a&gt;).&lt;/li&gt;
&lt;li&gt;Fixed random &lt;tt class=&quot;docutils literal&quot;&gt;SystemError&lt;/tt&gt; upon receiving abort signal (&lt;a class=&quot;reference external&quot; href=&quot;https://github.com/psycopg/psycopg2/issues/551&quot;&gt;ticket #551&lt;/a&gt;).&lt;/li&gt;
&lt;li&gt;Accept &lt;tt class=&quot;docutils literal&quot;&gt;sql.Composable&lt;/tt&gt; objects in &lt;tt class=&quot;docutils literal&quot;&gt;ReplicationCursor.start_replication_expert()&lt;/tt&gt; (&lt;a class=&quot;reference external&quot; href=&quot;https://github.com/psycopg/psycopg2/issues/554&quot;&gt;ticket 554&lt;/a&gt;).&lt;/li&gt;
&lt;li&gt;Parse intervals returned as microseconds from Redshift (&lt;a class=&quot;reference external&quot; href=&quot;https://github.com/psycopg/psycopg2/issues/558&quot;&gt;ticket #558&lt;/a&gt;).&lt;/li&gt;
&lt;li&gt;Added &lt;tt class=&quot;docutils literal&quot;&gt;Json.prepare()&lt;/tt&gt; method to consider connection params when adapting (&lt;a class=&quot;reference external&quot; href=&quot;https://github.com/psycopg/psycopg2/issues/562&quot;&gt;ticket #562&lt;/a&gt;).&lt;/li&gt;
&lt;li&gt;&lt;tt class=&quot;docutils literal&quot;&gt;errorcodes&lt;/tt&gt; map updated to PostgreSQL 10 beta 1.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;You can install psycopg2 &lt;a class=&quot;reference external&quot; href=&quot;https://pypi.python.org/pypi/psycopg2&quot;&gt;from PyPI&lt;/a&gt; or grab the new code from:&lt;/p&gt;
&lt;ul class=&quot;simple&quot;&gt;
&lt;li&gt;&lt;a class=&quot;reference external&quot; href=&quot;https://pypi.org/packages/source/p/psycopg2/psycopg2-2.7.2.tar.gz&quot;&gt;source package&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class=&quot;reference external&quot; href=&quot;https://pypi.org/packages/source/p/psycopg2/psycopg2-2.7.2.tar.gz.asc&quot;&gt;signature&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Happy hacking!&lt;/p&gt;
</content>
  </entry>
  <entry xml:base="https://www.psycopg.org/articles/2017/03/13/psycopg-271-released/">
    <title type="text">Psycopg 2.7.1 released</title>
    <id>urn:uuid:427a5259-4606-3ac6-84c4-5607ba22237f</id>
    <updated>2017-03-13T00:00:00Z</updated>
    <link href="https://www.psycopg.org/articles/2017/03/13/psycopg-271-released/" />
    <author>
      <name>Daniele Varrazzo</name>
    </author>
    <content type="html">&lt;p&gt;A quick bugfix release to solve some teething problems with some of the changes introduced in 2.7:&lt;/p&gt;
&lt;ul class=&quot;simple&quot;&gt;
&lt;li&gt;Ignore None arguments passed to &lt;tt class=&quot;docutils literal&quot;&gt;connect()&lt;/tt&gt; and &lt;tt class=&quot;docutils literal&quot;&gt;make_dsn()&lt;/tt&gt; (&lt;a class=&quot;reference external&quot; href=&quot;https://github.com/psycopg/psycopg2/issues/517&quot;&gt;ticket #517&lt;/a&gt;).&lt;/li&gt;
&lt;li&gt;OpenSSL upgraded from major version 0.9.8 to 1.0.2 in the Linux wheel packages (&lt;a class=&quot;reference external&quot; href=&quot;https://github.com/psycopg/psycopg2/issues/518&quot;&gt;ticket #518&lt;/a&gt;).&lt;/li&gt;
&lt;li&gt;Fixed build with libpq versions &amp;lt; 9.3 (&lt;a class=&quot;reference external&quot; href=&quot;https://github.com/psycopg/psycopg2/issues/520&quot;&gt;ticket #520&lt;/a&gt;).&lt;/li&gt;
&lt;/ul&gt;
&lt;!-- CUT-HERE --&gt;
&lt;p&gt;Code fresh to grab at:&lt;/p&gt;
&lt;ul class=&quot;simple&quot;&gt;
&lt;li&gt;&lt;a class=&quot;reference external&quot; href=&quot;https://pypi.org/packages/source/p/psycopg2/psycopg2-2.7.1.tar.gz&quot;&gt;source package&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class=&quot;reference external&quot; href=&quot;https://pypi.org/packages/source/p/psycopg2/psycopg2-2.7.1.tar.gz.asc&quot;&gt;signature&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Enjoy the release!&lt;/p&gt;
</content>
  </entry>
  <entry xml:base="https://www.psycopg.org/articles/2017/03/01/psycopg-27-released/">
    <title type="text">Psycopg 2.7 released</title>
    <id>urn:uuid:170c3d28-040e-3800-ae4b-ef1750b743e4</id>
    <updated>2017-03-01T00:00:00Z</updated>
    <link href="https://www.psycopg.org/articles/2017/03/01/psycopg-27-released/" />
    <author>
      <name>Daniele Varrazzo</name>
    </author>
    <content type="html">&lt;p&gt;Finally here! Thank you very much for waiting so long: we have finally released Psycopg 2.7!&lt;/p&gt;
&lt;p&gt;Buzzwords:&lt;/p&gt;
&lt;ul class=&quot;simple&quot;&gt;
&lt;li&gt;&lt;em&gt;Faster!&lt;/em&gt; Helps generating SQL for repeatedly executed statements and faster Unicode decoding.&lt;/li&gt;
&lt;li&gt;&lt;em&gt;Safer!&lt;/em&gt; Helps generating dynamic SQL statements with variable table and field names.&lt;/li&gt;
&lt;li&gt;&lt;em&gt;Easier!&lt;/em&gt; Use the binary package to avoid the need of C compiler, pg_config, libpq required on the clients.&lt;/li&gt;
&lt;li&gt;&lt;em&gt;Replication!&lt;/em&gt; Support for PostgreSQL physical and logical replication.&lt;/li&gt;
&lt;li&gt;&lt;em&gt;Plays-better-with-pgbouncer-at-transaction-pooling-level!&lt;/em&gt; This.&lt;/li&gt;
&lt;/ul&gt;
&lt;!-- CUT-HERE --&gt;
&lt;p&gt;You can download as usual from the canonical urls:&lt;/p&gt;
&lt;ul class=&quot;simple&quot;&gt;
&lt;li&gt;&lt;a class=&quot;reference external&quot; href=&quot;https://pypi.org/packages/source/p/psycopg2/psycopg2-2.7.tar.gz&quot;&gt;source package&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class=&quot;reference external&quot; href=&quot;https://pypi.org/packages/source/p/psycopg2/psycopg2-2.7.tar.gz.asc&quot;&gt;signature&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Or just use &lt;tt class=&quot;docutils literal&quot;&gt;pip&lt;/tt&gt;:&lt;/p&gt;
&lt;pre class=&quot;literal-block&quot;&gt;
pip install psycopg2
&lt;/pre&gt;
&lt;p&gt;&lt;strong&gt;What's new in psycopg 2.7&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;New features:&lt;/p&gt;
&lt;ul class=&quot;simple&quot;&gt;
&lt;li&gt;Added &lt;a class=&quot;reference external&quot; href=&quot;/docs/sql.html#module-psycopg2.sql&quot;&gt;psycopg2.sql&lt;/a&gt; module to generate SQL dynamically (&lt;a class=&quot;reference external&quot; href=&quot;https://github.com/psycopg/psycopg2/issues/308&quot;&gt;ticket #308&lt;/a&gt;).&lt;/li&gt;
&lt;li&gt;Added &lt;a class=&quot;reference external&quot; href=&quot;/docs/advanced.html#replication-support&quot;&gt;replication protocol support&lt;/a&gt; (&lt;a class=&quot;reference external&quot; href=&quot;https://github.com/psycopg/psycopg2/issues/322&quot;&gt;ticket #322&lt;/a&gt;). Main authors are
Oleksandr Shulgin and Craig Ringer, who deserve a huge thank you.&lt;/li&gt;
&lt;li&gt;Added &lt;a class=&quot;reference external&quot; href=&quot;/docs/extensions.html#psycopg2.extensions.parse_dsn&quot;&gt;parse_dsn()&lt;/a&gt; and
&lt;a class=&quot;reference external&quot; href=&quot;/docs/extensions.html#psycopg2.extensions.make_dsn&quot;&gt;make_dsn()&lt;/a&gt; functions (&lt;a class=&quot;reference external&quot; href=&quot;https://github.com/psycopg/psycopg2/issues/321&quot;&gt;ticket #321&lt;/a&gt;, &lt;a class=&quot;reference external&quot; href=&quot;https://github.com/psycopg/psycopg2/issues/363&quot;&gt;ticket #363&lt;/a&gt;).
&lt;a class=&quot;reference external&quot; href=&quot;/docs/module.html#psycopg2.connect&quot;&gt;connect()&lt;/a&gt; now can take both &lt;em&gt;dsn&lt;/em&gt; and keyword arguments, merging
them together.&lt;/li&gt;
&lt;li&gt;Added &lt;a class=&quot;reference external&quot; href=&quot;/docs/module.html#psycopg2.__libpq_version__&quot;&gt;__libpq_version__&lt;/a&gt; and &lt;a class=&quot;reference external&quot; href=&quot;/docs/extensions.html#psycopg2.extensions.libpq_version&quot;&gt;libpq_version()&lt;/a&gt; to inspect the version of the &lt;tt class=&quot;docutils literal&quot;&gt;libpq&lt;/tt&gt; library the module was compiled/loaded with
(&lt;a class=&quot;reference external&quot; href=&quot;https://github.com/psycopg/psycopg2/issues/35&quot;&gt;ticket #35&lt;/a&gt;, &lt;a class=&quot;reference external&quot; href=&quot;https://github.com/psycopg/psycopg2/issues/323&quot;&gt;ticket #323&lt;/a&gt;).&lt;/li&gt;
&lt;li&gt;The attributes &lt;a class=&quot;reference external&quot; href=&quot;/docs/connection.html#connection.notices&quot;&gt;notices&lt;/a&gt; and &lt;a class=&quot;reference external&quot; href=&quot;/docs/connection.html#connection.notifies&quot;&gt;notifies&lt;/a&gt; can be
customized replacing them with any object exposing an &lt;tt class=&quot;docutils literal&quot;&gt;append()&lt;/tt&gt; method
(&lt;a class=&quot;reference external&quot; href=&quot;https://github.com/psycopg/psycopg2/issues/326&quot;&gt;ticket #326&lt;/a&gt;).&lt;/li&gt;
&lt;li&gt;Adapt network types to &lt;a class=&quot;reference external&quot; href=&quot;https://docs.python.org/3/library/ipaddress.html#module-ipaddress&quot;&gt;ipaddress&lt;/a&gt; objects when available. When not
enabled, convert arrays of network types to lists by default. The old &lt;tt class=&quot;docutils literal&quot;&gt;Inet&lt;/tt&gt;
adapter is deprecated (&lt;a class=&quot;reference external&quot; href=&quot;https://github.com/psycopg/psycopg2/issues/317&quot;&gt;ticket #317&lt;/a&gt;, &lt;a class=&quot;reference external&quot; href=&quot;https://github.com/psycopg/psycopg2/issues/343&quot;&gt;ticket #343&lt;/a&gt;, &lt;a class=&quot;reference external&quot; href=&quot;https://github.com/psycopg/psycopg2/issues/387&quot;&gt;ticket #387&lt;/a&gt;).&lt;/li&gt;
&lt;li&gt;Added &lt;a class=&quot;reference external&quot; href=&quot;/docs/extensions.html#psycopg2.extensions.quote_ident&quot;&gt;quote_ident()&lt;/a&gt; function (&lt;a class=&quot;reference external&quot; href=&quot;https://github.com/psycopg/psycopg2/issues/359&quot;&gt;ticket #359&lt;/a&gt;).&lt;/li&gt;
&lt;li&gt;Added &lt;a class=&quot;reference external&quot; href=&quot;/docs/connection.html#connection.get_dsn_parameters&quot;&gt;get_dsn_parameters()&lt;/a&gt; connection method (&lt;a class=&quot;reference external&quot; href=&quot;https://github.com/psycopg/psycopg2/issues/364&quot;&gt;ticket #364&lt;/a&gt;).&lt;/li&gt;
&lt;li&gt;&lt;a class=&quot;reference external&quot; href=&quot;/docs/cursor.html#cursor.callproc&quot;&gt;callproc()&lt;/a&gt; now accepts a dictionary of parameters (&lt;a class=&quot;reference external&quot; href=&quot;https://github.com/psycopg/psycopg2/issues/381&quot;&gt;ticket #381&lt;/a&gt;).&lt;/li&gt;
&lt;li&gt;Give precedence to &lt;tt class=&quot;docutils literal&quot;&gt;__conform__()&lt;/tt&gt; over superclasses to choose an object
adapter (&lt;a class=&quot;reference external&quot; href=&quot;https://github.com/psycopg/psycopg2/issues/456&quot;&gt;ticket #456&lt;/a&gt;).&lt;/li&gt;
&lt;li&gt;Using Python C API decoding functions and codecs caching for faster
unicode encoding/decoding (&lt;a class=&quot;reference external&quot; href=&quot;https://github.com/psycopg/psycopg2/issues/473&quot;&gt;ticket #473&lt;/a&gt;).&lt;/li&gt;
&lt;li&gt;&lt;tt class=&quot;docutils literal&quot;&gt;executemany()&lt;/tt&gt; slowness addressed by
&lt;a class=&quot;reference external&quot; href=&quot;/docs/extras.html#psycopg2.extras.execute_batch&quot;&gt;execute_batch()&lt;/a&gt; and &lt;a class=&quot;reference external&quot; href=&quot;/docs/extras.html#psycopg2.extras.execute_values&quot;&gt;execute_values()&lt;/a&gt;
(&lt;a class=&quot;reference external&quot; href=&quot;https://github.com/psycopg/psycopg2/issues/491&quot;&gt;ticket #491&lt;/a&gt;).&lt;/li&gt;
&lt;li&gt;Added &lt;tt class=&quot;docutils literal&quot;&gt;async_&lt;/tt&gt; as an alias for &lt;tt class=&quot;docutils literal&quot;&gt;async&lt;/tt&gt; to support Python 3.7 where
&lt;tt class=&quot;docutils literal&quot;&gt;async&lt;/tt&gt; will become a keyword (&lt;a class=&quot;reference external&quot; href=&quot;https://github.com/psycopg/psycopg2/issues/495&quot;&gt;ticket #495&lt;/a&gt;).&lt;/li&gt;
&lt;li&gt;Unless in autocommit, do not use &lt;tt class=&quot;docutils literal&quot;&gt;default_transaction_*&lt;/tt&gt; settings to
control the session characteristics as it may create problems with external
connection pools such as pgbouncer; use &lt;tt class=&quot;docutils literal&quot;&gt;BEGIN&lt;/tt&gt; options instead
(&lt;a class=&quot;reference external&quot; href=&quot;https://github.com/psycopg/psycopg2/issues/503&quot;&gt;ticket #503&lt;/a&gt;).&lt;/li&gt;
&lt;li&gt;&lt;a class=&quot;reference external&quot; href=&quot;/docs/connection.html#connection.isolation_level&quot;&gt;isolation_level&lt;/a&gt; is now writable and entirely separated from
&lt;a class=&quot;reference external&quot; href=&quot;/docs/connection.html#connection.autocommit&quot;&gt;autocommit&lt;/a&gt;; added &lt;a class=&quot;reference external&quot; href=&quot;/docs/connection.html#connection.readonly&quot;&gt;readonly&lt;/a&gt;,
&lt;a class=&quot;reference external&quot; href=&quot;/docs/connection.html#connection.deferrable&quot;&gt;deferrable&lt;/a&gt; writable attributes.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Bug fixes:&lt;/p&gt;
&lt;ul class=&quot;simple&quot;&gt;
&lt;li&gt;Fixed error caused by missing decoding &lt;a class=&quot;reference external&quot; href=&quot;/docs/extras.html#psycopg2.extras.LoggingConnection&quot;&gt;LoggingConnection&lt;/a&gt;
(&lt;a class=&quot;reference external&quot; href=&quot;https://github.com/psycopg/psycopg2/issues/483&quot;&gt;ticket #483&lt;/a&gt;).&lt;/li&gt;
&lt;li&gt;Fixed integer overflow in &lt;tt class=&quot;docutils literal&quot;&gt;interval&lt;/tt&gt; seconds (&lt;a class=&quot;reference external&quot; href=&quot;https://github.com/psycopg/psycopg2/issues/512&quot;&gt;ticket #512&lt;/a&gt;).&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Other changes:&lt;/p&gt;
&lt;ul class=&quot;simple&quot;&gt;
&lt;li&gt;Dropped support for Python 2.5 and 3.1.&lt;/li&gt;
&lt;li&gt;Dropped support for client library older than PostgreSQL 9.1 (but older
server versions are still supported).&lt;/li&gt;
&lt;li&gt;&lt;a class=&quot;reference external&quot; href=&quot;/docs/connection.html#connection.isolation_level&quot;&gt;isolation_level&lt;/a&gt; doesn't read from the database but will return
&lt;a class=&quot;reference external&quot; href=&quot;/docs/extensions.html#psycopg2.extensions.ISOLATION_LEVEL_DEFAULT&quot;&gt;ISOLATION_LEVEL_DEFAULT&lt;/a&gt; if no value was set on the
connection.&lt;/li&gt;
&lt;li&gt;Empty arrays no more converted into lists if they don't have a type attached
(&lt;a class=&quot;reference external&quot; href=&quot;https://github.com/psycopg/psycopg2/issues/506&quot;&gt;ticket #506&lt;/a&gt;)&lt;/li&gt;
&lt;/ul&gt;
</content>
  </entry>
  <entry xml:base="https://www.psycopg.org/articles/2017/02/17/psycopg-27-beta-2-released/">
    <title type="text">Psycopg 2.7 beta 2 released</title>
    <id>urn:uuid:f9a558ec-bd02-3035-850d-a88c19c10ac1</id>
    <updated>2017-02-17T00:00:00Z</updated>
    <link href="https://www.psycopg.org/articles/2017/02/17/psycopg-27-beta-2-released/" />
    <author>
      <name>Daniele Varrazzo</name>
    </author>
    <content type="html">&lt;p&gt;Hello,&lt;/p&gt;
&lt;p&gt;we have released psycopg2 version 2.7 beta 2. This version comes two years after the previous major release so it is packed with new features and improvements; among the main points:&lt;/p&gt;
&lt;!-- CUT-HERE --&gt;
&lt;ul class=&quot;simple&quot;&gt;
&lt;li&gt;support for replication protocol&lt;/li&gt;
&lt;li&gt;helpers to build dynamically SQL statements and manipulate connection strings&lt;/li&gt;
&lt;li&gt;speedups in multiple execution and Unicode decoding&lt;/li&gt;
&lt;li&gt;better transactions characteristics support&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;A more complete list of changes is available at /docs/news.html#what-s-new-in-psycopg-2-7&lt;/p&gt;
&lt;p&gt;On top of the changes in the code we have addressed the deployment problems found my many inexperienced users, especially on Windows and OSX: psycopg is now distributed as a self-contained wheel package on PyPI, so that:&lt;/p&gt;
&lt;pre class=&quot;literal-block&quot;&gt;
pip install psycopg2
&lt;/pre&gt;
&lt;p&gt;will not require the presence of C compiler, headers, pg_config, libpq.&lt;/p&gt;
&lt;p&gt;Because of all these changes, we ask you kindly to test this psycopg beta release, both its installation and its usage, before we release the stable version, which should happen next week if we don't find any problem. The binary packages of the beta release are on the PyPI testing site: you can install it using:&lt;/p&gt;
&lt;pre class=&quot;literal-block&quot;&gt;
pip install -U pip # make sure to have an up-to-date pip
pip install -i https://testpypi.python.org/pypi psycopg2==2.7b2
&lt;/pre&gt;
&lt;p&gt;Thank you very much everyone, and I wish to thank especially Oleksandr Shulgin and Craig Ringer for the development of the replication protocol support (the development of which brought along several other features and improvement) and Jason Erickson for the invaluable help with the Windows packages.&lt;/p&gt;
&lt;p&gt;Happy testing!&lt;/p&gt;
</content>
  </entry>
  <entry xml:base="https://www.psycopg.org/articles/2016/07/07/psycopg-262-released/">
    <title type="text">Psycopg 2.6.2 released</title>
    <id>urn:uuid:7aa22508-3198-30ff-b679-1f958f9096c0</id>
    <updated>2016-07-07T00:00:00Z</updated>
    <link href="https://www.psycopg.org/articles/2016/07/07/psycopg-262-released/" />
    <author>
      <name>Daniele Varrazzo</name>
    </author>
    <content type="html">&lt;p&gt;Psycopg 2.6.2 has been released. You can get it from:&lt;/p&gt;
&lt;ul class=&quot;simple&quot;&gt;
&lt;li&gt;&lt;a class=&quot;reference external&quot; href=&quot;https://pypi.org/packages/source/p/psycopg2/psycopg2-2.6.2.tar.gz&quot;&gt;Download source package&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class=&quot;reference external&quot; href=&quot;https://pypi.org/packages/source/p/psycopg2/psycopg2-2.6.2.tar.gz.asc&quot;&gt;Signature&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;This is an interim release, packing together one year of bug fixes, before the release 2.7, intended to deliver several new features. Thank you very much to everybody contributing with reports, code, suggestions.&lt;/p&gt;
&lt;!-- CUT-HERE --&gt;
&lt;ul class=&quot;simple&quot;&gt;
&lt;li&gt;Fixed inconsistent state in externally closed connections
(&lt;a class=&quot;reference external&quot; href=&quot;https://github.com/psycopg/psycopg2/issues/263&quot;&gt;ticket #263&lt;/a&gt;, &lt;a class=&quot;reference external&quot; href=&quot;https://github.com/psycopg/psycopg2/issues/311&quot;&gt;ticket #311&lt;/a&gt;, &lt;a class=&quot;reference external&quot; href=&quot;https://github.com/psycopg/psycopg2/issues/443&quot;&gt;ticket #443&lt;/a&gt;).&lt;/li&gt;
&lt;li&gt;Report the server response status on errors (such as &lt;a class=&quot;reference external&quot; href=&quot;https://github.com/psycopg/psycopg2/issues/281&quot;&gt;ticket #281&lt;/a&gt;).&lt;/li&gt;
&lt;li&gt;Raise &lt;tt class=&quot;docutils literal&quot;&gt;NotSupportedError&lt;/tt&gt; on unhandled server response status
(&lt;a class=&quot;reference external&quot; href=&quot;https://github.com/psycopg/psycopg2/issues/352&quot;&gt;ticket #352&lt;/a&gt;).&lt;/li&gt;
&lt;li&gt;Allow overriding string adapter encoding with no connection (&lt;a class=&quot;reference external&quot; href=&quot;https://github.com/psycopg/psycopg2/issues/331&quot;&gt;ticket #331&lt;/a&gt;).&lt;/li&gt;
&lt;li&gt;The &lt;tt class=&quot;docutils literal&quot;&gt;wait_select&lt;/tt&gt; callback allows interrupting a
long-running query in an interactive shell using &lt;tt class=&quot;docutils literal&quot;&gt;&lt;span class=&quot;pre&quot;&gt;Ctrl-C&lt;/span&gt;&lt;/tt&gt;
(&lt;a class=&quot;reference external&quot; href=&quot;https://github.com/psycopg/psycopg2/issues/333&quot;&gt;ticket #333&lt;/a&gt;).&lt;/li&gt;
&lt;li&gt;Fixed &lt;tt class=&quot;docutils literal&quot;&gt;PersistentConnectionPool&lt;/tt&gt; on Python 3 (&lt;a class=&quot;reference external&quot; href=&quot;https://github.com/psycopg/psycopg2/issues/348&quot;&gt;ticket #348&lt;/a&gt;).&lt;/li&gt;
&lt;li&gt;Fixed segfault on &lt;tt class=&quot;docutils literal&quot;&gt;repr()&lt;/tt&gt; of an uninitialized connection (&lt;a class=&quot;reference external&quot; href=&quot;https://github.com/psycopg/psycopg2/issues/361&quot;&gt;ticket #361&lt;/a&gt;).&lt;/li&gt;
&lt;li&gt;Allow adapting bytes using &lt;tt class=&quot;docutils literal&quot;&gt;QuotedString&lt;/tt&gt; on Python 3
(&lt;a class=&quot;reference external&quot; href=&quot;https://github.com/psycopg/psycopg2/issues/365&quot;&gt;ticket #365&lt;/a&gt;).&lt;/li&gt;
&lt;li&gt;Added support for setuptools/wheel (&lt;a class=&quot;reference external&quot; href=&quot;https://github.com/psycopg/psycopg2/issues/370&quot;&gt;ticket #370&lt;/a&gt;).&lt;/li&gt;
&lt;li&gt;Fix build on Windows with Python 3.5, VS 2015 (&lt;a class=&quot;reference external&quot; href=&quot;https://github.com/psycopg/psycopg2/issues/380&quot;&gt;ticket #380&lt;/a&gt;).&lt;/li&gt;
&lt;li&gt;Fixed &lt;tt class=&quot;docutils literal&quot;&gt;errorcodes.lookup&lt;/tt&gt; initialization thread-safety (&lt;a class=&quot;reference external&quot; href=&quot;https://github.com/psycopg/psycopg2/issues/382&quot;&gt;ticket #382&lt;/a&gt;).&lt;/li&gt;
&lt;li&gt;Fixed &lt;tt class=&quot;docutils literal&quot;&gt;read()&lt;/tt&gt; exception propagation in copy_from (&lt;a class=&quot;reference external&quot; href=&quot;https://github.com/psycopg/psycopg2/issues/412&quot;&gt;ticket #412&lt;/a&gt;).&lt;/li&gt;
&lt;li&gt;Fixed possible NULL TZ decref  (&lt;a class=&quot;reference external&quot; href=&quot;https://github.com/psycopg/psycopg2/issues/424&quot;&gt;ticket #424&lt;/a&gt;).&lt;/li&gt;
&lt;li&gt;&lt;tt class=&quot;docutils literal&quot;&gt;psycopg2.errorcodes&lt;/tt&gt; map updated to PostgreSQL 9.5.&lt;/li&gt;
&lt;/ul&gt;
</content>
  </entry>
  <entry xml:base="https://www.psycopg.org/articles/2015/06/16/psycopg-261-released/">
    <title type="text">Psycopg 2.6.1 released</title>
    <id>urn:uuid:dd4f61dc-220c-380b-825c-030e2de140fa</id>
    <updated>2015-06-16T00:00:00Z</updated>
    <link href="https://www.psycopg.org/articles/2015/06/16/psycopg-261-released/" />
    <author>
      <name>Daniele Varrazzo</name>
    </author>
    <content type="html">&lt;p&gt;Psycopg 2.6.1 has been released. You can get it from:&lt;/p&gt;
&lt;ul class=&quot;simple&quot;&gt;
&lt;li&gt;&lt;a class=&quot;reference external&quot; href=&quot;https://pypi.org/packages/source/p/psycopg2/psycopg2-2.6.1.tar.gz&quot;&gt;Download source package&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class=&quot;reference external&quot; href=&quot;https://pypi.org/packages/source/p/psycopg2/psycopg2-2.6.1.tar.gz.asc&quot;&gt;Signature&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;!-- CUT-HERE --&gt;
&lt;p&gt;The most important bug fixed in this release is the libcrypto
callbacks conflict between libpq and Python (&lt;a class=&quot;reference external&quot; href=&quot;https://github.com/psycopg/psycopg2/issues/290&quot;&gt;ticket #290&lt;/a&gt;), fixed by Jan
Urbański: thank you very much. Other bugs fixed:&lt;/p&gt;
&lt;ul class=&quot;simple&quot;&gt;
&lt;li&gt;Lists consisting of only &lt;tt class=&quot;docutils literal&quot;&gt;None&lt;/tt&gt; are escaped correctly (&lt;a class=&quot;reference external&quot; href=&quot;https://github.com/psycopg/psycopg2/issues/285&quot;&gt;ticket #285&lt;/a&gt;).&lt;/li&gt;
&lt;li&gt;Correctly unlock the connection after error in flush (&lt;a class=&quot;reference external&quot; href=&quot;https://github.com/psycopg/psycopg2/issues/294&quot;&gt;ticket #294&lt;/a&gt;).&lt;/li&gt;
&lt;li&gt;Fixed &lt;tt class=&quot;docutils literal&quot;&gt;MinTimeLoggingCursor.callproc()&lt;/tt&gt; (&lt;a class=&quot;reference external&quot; href=&quot;https://github.com/psycopg/psycopg2/issues/309&quot;&gt;ticket #309&lt;/a&gt;).&lt;/li&gt;
&lt;/ul&gt;
</content>
  </entry>
  <entry xml:base="https://www.psycopg.org/articles/2015/02/09/psycopg-26-and-255-released/">
    <title type="text">Psycopg 2.6 and 2.5.5 released</title>
    <id>urn:uuid:85065faf-0a0c-3def-8d62-5636e28b7e62</id>
    <updated>2015-02-09T00:00:00Z</updated>
    <link href="https://www.psycopg.org/articles/2015/02/09/psycopg-26-and-255-released/" />
    <author>
      <name>Daniele Varrazzo</name>
    </author>
    <content type="html">&lt;p&gt;We have just released two Psycopg versions: 2.5.5 containing a few bug fixes and 2.6 introducing some new features.&lt;/p&gt;
&lt;!-- CUT-HERE --&gt;
&lt;p&gt;The main new feature in Psycopg 2.6 is the support for the large objects 64 bits API, allowing access to large objects of more than 2GB size. Note that the feature is only supported on 64 bits clients and with at least PostgreSQL 9.3 server and client library.&lt;/p&gt;
&lt;p&gt;I wish to thank all the people who have contributed to these releases, and especially Blake Rouse and the MAAS Team for the development of the large objects 64 bits API support.&lt;/p&gt;
&lt;ul class=&quot;simple&quot;&gt;
&lt;li&gt;Psycopg 2.6 &lt;a class=&quot;reference external&quot; href=&quot;https://pypi.org/packages/source/p/psycopg2/psycopg2-2.6.tar.gz&quot;&gt;source package&lt;/a&gt;, &lt;a class=&quot;reference external&quot; href=&quot;https://pypi.org/packages/source/p/psycopg2/psycopg2-2.6.tar.gz.asc&quot;&gt;signature&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Psycopg 2.5.5 &lt;a class=&quot;reference external&quot; href=&quot;https://pypi.org/packages/source/p/psycopg2/psycopg2-2.5.5.tar.gz&quot;&gt;source package&lt;/a&gt;,  &lt;a class=&quot;reference external&quot; href=&quot;https://pypi.org/packages/source/p/psycopg2/psycopg2-2.5.5.tar.gz.asc&quot;&gt;signature&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;This is the full list of changes for the new versions:&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Psycopg 2.6 new features&lt;/strong&gt;&lt;/p&gt;
&lt;ul class=&quot;simple&quot;&gt;
&lt;li&gt;Added support for large objects larger than 2GB.&lt;/li&gt;
&lt;li&gt;Python &lt;tt class=&quot;docutils literal&quot;&gt;time&lt;/tt&gt; objects with a tzinfo specified and PostgreSQL &lt;tt class=&quot;docutils literal&quot;&gt;timetz&lt;/tt&gt;
data are converted into each other (&lt;a class=&quot;reference external&quot; href=&quot;https://github.com/psycopg/psycopg2/issues/272&quot;&gt;ticket #272&lt;/a&gt;).&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;Psycopg 2.6 bug fixes&lt;/strong&gt;&lt;/p&gt;
&lt;ul class=&quot;simple&quot;&gt;
&lt;li&gt;Json apapter's &lt;tt class=&quot;docutils literal&quot;&gt;str()&lt;/tt&gt; returns the adapted content instead of the &lt;tt class=&quot;docutils literal&quot;&gt;repr()&lt;/tt&gt;
(&lt;a class=&quot;reference external&quot; href=&quot;https://github.com/psycopg/psycopg2/issues/191&quot;&gt;ticket #191&lt;/a&gt;).&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;Psycopg 2.5.5 bug fixes&lt;/strong&gt;&lt;/p&gt;
&lt;ul class=&quot;simple&quot;&gt;
&lt;li&gt;Named cursors used as context manager don't swallow the exception on exit
(&lt;a class=&quot;reference external&quot; href=&quot;https://github.com/psycopg/psycopg2/issues/262&quot;&gt;ticket #262&lt;/a&gt;).&lt;/li&gt;
&lt;li&gt;&lt;tt class=&quot;docutils literal&quot;&gt;cursor.description&lt;/tt&gt; can be pickled (&lt;a class=&quot;reference external&quot; href=&quot;https://github.com/psycopg/psycopg2/issues/265&quot;&gt;ticket #265&lt;/a&gt;).&lt;/li&gt;
&lt;li&gt;Propagate read error messages in COPY FROM (&lt;a class=&quot;reference external&quot; href=&quot;https://github.com/psycopg/psycopg2/issues/270&quot;&gt;ticket #270&lt;/a&gt;).&lt;/li&gt;
&lt;li&gt;PostgreSQL time 24:00 is converted to Python 00:00 (&lt;a class=&quot;reference external&quot; href=&quot;https://github.com/psycopg/psycopg2/issues/278&quot;&gt;ticket #278&lt;/a&gt;).&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;A further note for the packagers: the Psycopg 2.6 source tarball doesn't contain the HTML rendered documentation anymore: you will find Makefile targets to easily build it.&lt;/p&gt;
</content>
  </entry>
  <entry xml:base="https://www.psycopg.org/articles/2014/08/30/psycopg-254-released/">
    <title type="text">Psycopg 2.5.4 released</title>
    <id>urn:uuid:d58b64a4-e4cb-3e36-b695-685b632347cb</id>
    <updated>2014-08-30T00:00:00Z</updated>
    <link href="https://www.psycopg.org/articles/2014/08/30/psycopg-254-released/" />
    <author>
      <name>Daniele Varrazzo</name>
    </author>
    <content type="html">&lt;p&gt;Psycopg 2.5.4 has been released. You can get it from:&lt;/p&gt;
&lt;ul class=&quot;simple&quot;&gt;
&lt;li&gt;&lt;a class=&quot;reference external&quot; href=&quot;https://pypi.org/packages/source/p/psycopg2/psycopg2-2.5.4.tar.gz&quot;&gt;Download source package&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class=&quot;reference external&quot; href=&quot;https://pypi.org/packages/source/p/psycopg2/psycopg2-2.5.4.tar.gz.asc&quot;&gt;Signature&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;This version supports the new jsonb PostgreSQL type out-of-the-box. And of course there are a few bug fixed:&lt;/p&gt;
&lt;!-- CUT-HERE --&gt;
&lt;ul class=&quot;simple&quot;&gt;
&lt;li&gt;Added &lt;tt class=&quot;docutils literal&quot;&gt;jsonb&lt;/tt&gt; support for PostgreSQL 9.4 (&lt;a class=&quot;reference external&quot; href=&quot;https://github.com/psycopg/psycopg2/issues/226&quot;&gt;ticket #226&lt;/a&gt;).&lt;/li&gt;
&lt;li&gt;Fixed segfault if COPY statements are passed to &lt;tt class=&quot;docutils literal&quot;&gt;execute()&lt;/tt&gt; instead
of using the proper methods (&lt;a class=&quot;reference external&quot; href=&quot;https://github.com/psycopg/psycopg2/issues/219&quot;&gt;ticket #219&lt;/a&gt;).&lt;/li&gt;
&lt;li&gt;Force conversion of pool arguments to integer to avoid potentially unbounded
pools (&lt;a class=&quot;reference external&quot; href=&quot;https://github.com/psycopg/psycopg2/issues/220&quot;&gt;ticket #220&lt;/a&gt;).&lt;/li&gt;
&lt;li&gt;Cursors &lt;tt class=&quot;docutils literal&quot;&gt;WITH HOLD&lt;/tt&gt; don't begin a new transaction upon move/fetch/close
(&lt;a class=&quot;reference external&quot; href=&quot;https://github.com/psycopg/psycopg2/issues/228&quot;&gt;ticket #228&lt;/a&gt;).&lt;/li&gt;
&lt;li&gt;Cursors &lt;tt class=&quot;docutils literal&quot;&gt;WITH HOLD&lt;/tt&gt; can be used in autocommit (&lt;a class=&quot;reference external&quot; href=&quot;https://github.com/psycopg/psycopg2/issues/229&quot;&gt;ticket #229&lt;/a&gt;).&lt;/li&gt;
&lt;li&gt;&lt;tt class=&quot;docutils literal&quot;&gt;callproc()&lt;/tt&gt; doesn't silently ignore an argument without a length.&lt;/li&gt;
&lt;li&gt;Fixed memory leak with large objects (&lt;a class=&quot;reference external&quot; href=&quot;https://github.com/psycopg/psycopg2/issues/256&quot;&gt;ticket #256&lt;/a&gt;).&lt;/li&gt;
&lt;li&gt;The internal &lt;tt class=&quot;docutils literal&quot;&gt;_psycopg.so&lt;/tt&gt; module can be imported stand-alone (to
allow modules juggling such as the one described in &lt;a class=&quot;reference external&quot; href=&quot;https://github.com/psycopg/psycopg2/issues/201&quot;&gt;ticket #201&lt;/a&gt;).&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Have a good weekend!&lt;/p&gt;
</content>
  </entry>
  <entry xml:base="https://www.psycopg.org/articles/2014/07/20/cancelling-postgresql-statements-python/">
    <title type="text">Cancelling PostgreSQL statements from Python</title>
    <id>urn:uuid:f2f4cd29-0f0d-3847-a887-e6b67f6a8e2f</id>
    <updated>2014-07-20T00:00:00Z</updated>
    <link href="https://www.psycopg.org/articles/2014/07/20/cancelling-postgresql-statements-python/" />
    <author>
      <name>Daniele Varrazzo</name>
    </author>
    <content type="html">&lt;p&gt;Cancelling a long running query from Python is not something that happens automatically: the libpq doesn't react to Python signals so the only way to stop a query is to run a &lt;tt class=&quot;docutils literal&quot;&gt;pg_cancel_backend&lt;/tt&gt; from another process. Killing the Python process won't cancel the query: it will run until completion and then rolled back. This makes working wth long-running query from the Python interpreter somewhat frustrating.&lt;/p&gt;
&lt;!-- CUT-HERE --&gt;
&lt;p&gt;Using psycopg in &lt;a class=&quot;reference external&quot; href=&quot;/docs/advanced.html#support-for-coroutine-libraries&quot;&gt;green mode&lt;/a&gt; moves the waiting from the libpq C code to Python: this gives Python some chance of interaction: it is possible for instance to catch a ctrl-c and send a cancel request:&lt;/p&gt;
&lt;pre class=&quot;code python literal-block&quot;&gt;
&lt;span class=&quot;kn&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;select&lt;/span&gt; &lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;select&lt;/span&gt;
&lt;span class=&quot;kn&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;psycopg2.extensions&lt;/span&gt; &lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;POLL_OK&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;POLL_READ&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;POLL_WRITE&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;wait_select_inter&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;conn&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;while&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;try&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;state&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;conn&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;poll&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
            &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;state&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;POLL_OK&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
                &lt;span class=&quot;k&quot;&gt;break&lt;/span&gt;
            &lt;span class=&quot;k&quot;&gt;elif&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;state&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;POLL_READ&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
                &lt;span class=&quot;n&quot;&gt;select&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;([&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;conn&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;fileno&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()],&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[],&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[])&lt;/span&gt;
            &lt;span class=&quot;k&quot;&gt;elif&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;state&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;POLL_WRITE&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
                &lt;span class=&quot;n&quot;&gt;select&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;([],&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;conn&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;fileno&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()],&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[])&lt;/span&gt;
            &lt;span class=&quot;k&quot;&gt;else&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
                &lt;span class=&quot;k&quot;&gt;raise&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;conn&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;OperationalError&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;
                    &lt;span class=&quot;s2&quot;&gt;&amp;quot;bad state from poll: &lt;/span&gt;&lt;span class=&quot;si&quot;&gt;%s&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&amp;quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;%&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;state&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;except&lt;/span&gt; &lt;span class=&quot;ne&quot;&gt;KeyboardInterrupt&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;conn&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;cancel&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
            &lt;span class=&quot;c1&quot;&gt;# the loop will be broken by a server error&lt;/span&gt;
            &lt;span class=&quot;k&quot;&gt;continue&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;psycopg2&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;extensions&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;set_wait_callback&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;wait_select_inter&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;/pre&gt;
&lt;p&gt;An interactive session would look like:&lt;/p&gt;
&lt;pre class=&quot;code pycon literal-block&quot;&gt;
&lt;span class=&quot;n&quot;&gt;&lt;/span&gt;&lt;span class=&quot;gp&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;cnn&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;psycopg2&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;connect&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;''&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;gp&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;cur&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;cnn&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;cursor&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
&lt;span class=&quot;gp&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;cur&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;execute&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&amp;quot;select pg_sleep(10)&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;go&quot;&gt;^C
&lt;/span&gt;&lt;span class=&quot;gt&quot;&gt;Traceback (most recent call last):
&lt;/span&gt;  File &lt;span class=&quot;nb&quot;&gt;&amp;quot;&amp;lt;stdin&amp;gt;&amp;quot;&lt;/span&gt;, line &lt;span class=&quot;m&quot;&gt;1&lt;/span&gt;, in &lt;span class=&quot;n&quot;&gt;&amp;lt;module&amp;gt;&lt;/span&gt;
&lt;span class=&quot;gr&quot;&gt;QueryCanceledError&lt;/span&gt;: &lt;span class=&quot;n&quot;&gt;canceling statement due to user request&lt;/span&gt;
&lt;/pre&gt;
&lt;p&gt;The connection is now in error state, but a &lt;tt class=&quot;docutils literal&quot;&gt;cnn.rollback()&lt;/tt&gt; would make it working again.&lt;/p&gt;
</content>
  </entry>
  <entry xml:base="https://www.psycopg.org/articles/2014/05/13/psycopg-253-released/">
    <title type="text">Psycopg 2.5.3 Released</title>
    <id>urn:uuid:93b46916-90d5-375e-865b-54877b06ddd8</id>
    <updated>2014-05-13T00:00:00Z</updated>
    <link href="https://www.psycopg.org/articles/2014/05/13/psycopg-253-released/" />
    <author>
      <name>Daniele Varrazzo</name>
    </author>
    <content type="html">&lt;p&gt;Psycopg 2.5.3 has been released. You can get it from:&lt;/p&gt;
&lt;ul class=&quot;simple&quot;&gt;
&lt;li&gt;&lt;a class=&quot;reference external&quot; href=&quot;https://pypi.org/packages/source/p/psycopg2/psycopg2-2.5.3.tar.gz&quot;&gt;Download source package&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class=&quot;reference external&quot; href=&quot;https://pypi.org/packages/source/p/psycopg2/psycopg2-2.5.3.tar.gz.asc&quot;&gt;Signature&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;This version contains several bug fixes over the previous release 2.5.2:&lt;/p&gt;
&lt;!-- CUT-HERE --&gt;
&lt;ul class=&quot;simple&quot;&gt;
&lt;li&gt;Work around &lt;a class=&quot;reference external&quot; href=&quot;https://github.com/pypa/pip/issues/1630&quot;&gt;pip issue #1630&lt;/a&gt;
making installation via &lt;tt class=&quot;docutils literal&quot;&gt;pip &lt;span class=&quot;pre&quot;&gt;-e&lt;/span&gt; git+url&lt;/tt&gt; impossible (&lt;a class=&quot;reference external&quot; href=&quot;https://github.com/psycopg/psycopg2/issues/18&quot;&gt;ticket #18&lt;/a&gt;).&lt;/li&gt;
&lt;li&gt;Copy operations correctly set the &lt;tt class=&quot;docutils literal&quot;&gt;cursor.rowcount&lt;/tt&gt; attribute
(&lt;a class=&quot;reference external&quot; href=&quot;https://github.com/psycopg/psycopg2/issues/180&quot;&gt;ticket #180&lt;/a&gt;).&lt;/li&gt;
&lt;li&gt;It is now possible to call &lt;tt class=&quot;docutils literal&quot;&gt;get_transaction_status()&lt;/tt&gt; on closed connections.&lt;/li&gt;
&lt;li&gt;Fixed unsafe access to object names causing assertion failures in
Python 3 debug builds (&lt;a class=&quot;reference external&quot; href=&quot;https://github.com/psycopg/psycopg2/issues/188&quot;&gt;ticket #188&lt;/a&gt;).&lt;/li&gt;
&lt;li&gt;Mark the connection closed if found broken on &lt;tt class=&quot;docutils literal&quot;&gt;poll()&lt;/tt&gt; (from &lt;a class=&quot;reference external&quot; href=&quot;https://github.com/psycopg/psycopg2/issues/192&quot;&gt;ticket #192&lt;/a&gt;
discussion)&lt;/li&gt;
&lt;li&gt;Fixed handling of dsn and closed attributes in connection subclasses
failing to connect (from &lt;a class=&quot;reference external&quot; href=&quot;https://github.com/psycopg/psycopg2/issues/192&quot;&gt;ticket #192&lt;/a&gt; discussion).&lt;/li&gt;
&lt;li&gt;Added arbitrary but stable order to &lt;tt class=&quot;docutils literal&quot;&gt;Range&lt;/tt&gt; objects, thanks to
Chris Withers (&lt;a class=&quot;reference external&quot; href=&quot;https://github.com/psycopg/psycopg2/issues/193&quot;&gt;ticket #193&lt;/a&gt;).&lt;/li&gt;
&lt;li&gt;Avoid blocking async connections on connect (&lt;a class=&quot;reference external&quot; href=&quot;https://github.com/psycopg/psycopg2/issues/194&quot;&gt;ticket #194&lt;/a&gt;). Thanks to
Adam Petrovich for the bug report and diagnosis.&lt;/li&gt;
&lt;li&gt;Don't segfault using poorly defined cursor subclasses which forgot to call
the superclass init (&lt;a class=&quot;reference external&quot; href=&quot;https://github.com/psycopg/psycopg2/issues/195&quot;&gt;ticket #195&lt;/a&gt;).&lt;/li&gt;
&lt;li&gt;Mark the connection closed when a Socket connection is broken, as it
happens for TCP connections instead (&lt;a class=&quot;reference external&quot; href=&quot;https://github.com/psycopg/psycopg2/issues/196&quot;&gt;ticket #196&lt;/a&gt;).&lt;/li&gt;
&lt;li&gt;Fixed overflow opening a lobject with an oid not fitting in a signed int
(&lt;a class=&quot;reference external&quot; href=&quot;https://github.com/psycopg/psycopg2/issues/203&quot;&gt;ticket #203&lt;/a&gt;).&lt;/li&gt;
&lt;li&gt;Fixed handling of explicit default &lt;tt class=&quot;docutils literal&quot;&gt;cursor_factory=None&lt;/tt&gt; in
&lt;tt class=&quot;docutils literal&quot;&gt;connection.cursor()&lt;/tt&gt; (&lt;a class=&quot;reference external&quot; href=&quot;https://github.com/psycopg/psycopg2/issues/210&quot;&gt;ticket #210&lt;/a&gt;).&lt;/li&gt;
&lt;li&gt;Fixed possible segfault in named cursors creation.&lt;/li&gt;
&lt;li&gt;Fixed debug build on Windows, thanks to James Emerton.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Thank you very much to everybody helping with this release!&lt;/p&gt;
</content>
  </entry>
  <entry xml:base="https://www.psycopg.org/articles/2014/01/07/psycopg-252-released/">
    <title type="text">Psycopg 2.5.2 released</title>
    <id>urn:uuid:c48636fa-8cb0-3d5f-bb82-18b0f07b09b5</id>
    <updated>2014-01-07T00:00:00Z</updated>
    <link href="https://www.psycopg.org/articles/2014/01/07/psycopg-252-released/" />
    <author>
      <name>Daniele Varrazzo</name>
    </author>
    <content type="html">&lt;p&gt;Psycopg 2.5.2 has been released. You can get it from:&lt;/p&gt;
&lt;ul class=&quot;simple&quot;&gt;
&lt;li&gt;&lt;a class=&quot;reference external&quot; href=&quot;https://pypi.org/packages/source/p/psycopg2/psycopg2-2.5.2.tar.gz&quot;&gt;Download source package&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class=&quot;reference external&quot; href=&quot;https://pypi.org/packages/source/p/psycopg2/psycopg2-2.5.2.tar.gz.asc&quot;&gt;Signature&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;This version contains a few bug fixes over the previous release 2.5.1:&lt;/p&gt;
&lt;ul class=&quot;simple&quot;&gt;
&lt;li&gt;Fixed segfault pickling the exception raised on connection error
(&lt;a class=&quot;reference external&quot; href=&quot;https://github.com/psycopg/psycopg2/issues/170&quot;&gt;ticket #170&lt;/a&gt;).&lt;/li&gt;
&lt;li&gt;Meaningful connection errors report a meaningful message, thanks to
Alexey Borzenkov (&lt;a class=&quot;reference external&quot; href=&quot;https://github.com/psycopg/psycopg2/issues/173&quot;&gt;ticket #173&lt;/a&gt;).&lt;/li&gt;
&lt;li&gt;Manually creating &lt;tt class=&quot;docutils literal&quot;&gt;lobject&lt;/tt&gt; with the wrong parameter doesn't segfault
(&lt;a class=&quot;reference external&quot; href=&quot;https://github.com/psycopg/psycopg2/issues/187&quot;&gt;ticket #187&lt;/a&gt;).&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Thank you very much to all the people who helped during the development!&lt;/p&gt;
</content>
  </entry>
  <entry xml:base="https://www.psycopg.org/articles/2013/06/23/psycopg-251-released/">
    <title type="text">Psycopg 2.5.1 released</title>
    <id>urn:uuid:6e009f5f-b874-3dbe-8e82-452c7fd8fb2d</id>
    <updated>2013-06-23T00:00:00Z</updated>
    <link href="https://www.psycopg.org/articles/2013/06/23/psycopg-251-released/" />
    <author>
      <name>Daniele Varrazzo</name>
    </author>
    <content type="html">&lt;p&gt;Psycopg 2.5.1 has been released. You can get it from:&lt;/p&gt;
&lt;ul class=&quot;simple&quot;&gt;
&lt;li&gt;&lt;a class=&quot;reference external&quot; href=&quot;https://pypi.org/packages/source/p/psycopg2/psycopg2-2.5.1.tar.gz&quot;&gt;Download source package&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class=&quot;reference external&quot; href=&quot;https://pypi.org/packages/source/p/psycopg2/psycopg2-2.5.1.tar.gz.asc&quot;&gt;Signature&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;The version contains a few bug fixes over the previous 2.5:&lt;/p&gt;
&lt;ul class=&quot;simple&quot;&gt;
&lt;li&gt;Fixed build on Solaris 10 and 11 where the &lt;tt class=&quot;docutils literal&quot;&gt;round()&lt;/tt&gt; function is already
declared (&lt;a class=&quot;reference external&quot; href=&quot;https://github.com/psycopg/psycopg2/issues/146&quot;&gt;ticket #146&lt;/a&gt;).&lt;/li&gt;
&lt;li&gt;Fixed comparison of &lt;tt class=&quot;docutils literal&quot;&gt;Range&lt;/tt&gt; with non-range objects (&lt;a class=&quot;reference external&quot; href=&quot;https://github.com/psycopg/psycopg2/issues/164&quot;&gt;ticket #164&lt;/a&gt;).
Thanks to Chris Withers for the patch.&lt;/li&gt;
&lt;li&gt;Fixed double-free on connection dealloc (&lt;a class=&quot;reference external&quot; href=&quot;https://github.com/psycopg/psycopg2/issues/166&quot;&gt;ticket #166&lt;/a&gt;). Thanks to
Gangadharan S.A. for the report and fix suggestion.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Happy hacking!&lt;/p&gt;
</content>
  </entry>
  <entry xml:base="https://www.psycopg.org/articles/2013/04/07/psycopg-25-released/">
    <title type="text">Psycopg 2.5 released</title>
    <id>urn:uuid:0db41bb0-00a4-340f-a60e-ad33adce3ff3</id>
    <updated>2013-04-07T00:00:00Z</updated>
    <link href="https://www.psycopg.org/articles/2013/04/07/psycopg-25-released/" />
    <author>
      <name>Daniele Varrazzo</name>
    </author>
    <content type="html">&lt;p&gt;We are happy to introduce the release 2.5 of Psycopg, packed with several juicy new features!&lt;/p&gt;
&lt;ul class=&quot;simple&quot;&gt;
&lt;li&gt;&lt;a class=&quot;reference external&quot; href=&quot;https://pypi.org/packages/source/p/psycopg2/psycopg2-2.5.tar.gz&quot;&gt;Download source package&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class=&quot;reference external&quot; href=&quot;https://pypi.org/packages/source/p/psycopg2/psycopg2-2.5.tar.gz.asc&quot;&gt;Signature&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Here are a few highlights of the release:&lt;/p&gt;
&lt;!-- CUT-HERE --&gt;
&lt;div class=&quot;section&quot; id=&quot;json-adapter&quot;&gt;
&lt;h2&gt;JSON adapter&lt;/h2&gt;
&lt;p&gt;The JSON adapter allows easy exchange of unstructured data with the database:&lt;/p&gt;
&lt;pre class=&quot;code python literal-block&quot;&gt;
&lt;span class=&quot;o&quot;&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;cur&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;execute&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;...&lt;/span&gt;     &lt;span class=&quot;s2&quot;&gt;&amp;quot;&amp;quot;&amp;quot;select '{&amp;quot;a&amp;quot;:[1,2,3],&amp;quot;b&amp;quot;:[4,5,6]}'::json&amp;quot;&amp;quot;&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;cur&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;fetchone&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;sa&quot;&gt;u&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'a'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;],&lt;/span&gt; &lt;span class=&quot;sa&quot;&gt;u&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'b'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;4&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;5&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;6&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]}&lt;/span&gt;
&lt;/pre&gt;
&lt;p&gt;It works with PostgreSQL 9.2 native &lt;a class=&quot;reference external&quot; href=&quot;http://www.postgresql.org/docs/current/static/datatype-json.html&quot;&gt;JSON data type&lt;/a&gt;, with previous versions' &lt;a class=&quot;reference external&quot; href=&quot;http://people.planetpostgresql.org/andrew/index.php?/archives/255-JSON-for-PG-9.2-...-and-now-for-9.1!.html&quot;&gt;extension modules&lt;/a&gt; and, in a pinch, with regular text too. You can feed JSON data to PostgreSQL using &lt;a class=&quot;reference external&quot; href=&quot;/psycopg/docs/extras.html#psycopg2.extras.Json&quot;&gt;a specific adapter&lt;/a&gt;:&lt;/p&gt;
&lt;pre class=&quot;code python literal-block&quot;&gt;
&lt;span class=&quot;n&quot;&gt;curs&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;execute&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&amp;quot;insert into mytable (jsondata) values (&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;%s&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;)&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Json&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;({&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'a'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;100&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;})])&lt;/span&gt;
&lt;/pre&gt;
&lt;p&gt;or you can be more aggressive and ask for automatic JSON serialization for every type you want to support, dictionaries for instance:&lt;/p&gt;
&lt;pre class=&quot;code python literal-block&quot;&gt;
&lt;span class=&quot;n&quot;&gt;psycopg2&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;extensions&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;register_adapter&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;dict&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Json&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;curs&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;execute&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&amp;quot;insert into mytable (jsondata) values (&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;%s&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;)&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;[{&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'a'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;100&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}])&lt;/span&gt;
&lt;/pre&gt;
&lt;/div&gt;
&lt;div class=&quot;section&quot; id=&quot;range-adapters&quot;&gt;
&lt;h2&gt;Range adapters&lt;/h2&gt;
&lt;p&gt;Other handy adapters for PostgreSQL 9.2 are the &lt;a class=&quot;reference external&quot; href=&quot;http://www.postgresql.org/docs/current/static/rangetypes.html&quot;&gt;Range data type&lt;/a&gt; adapters family: ranges are returned as &lt;a class=&quot;reference external&quot; href=&quot;/psycopg/docs/extras.html#psycopg2.extras.Range&quot;&gt;an object&lt;/a&gt; allowing access to their properties:&lt;/p&gt;
&lt;pre class=&quot;code python literal-block&quot;&gt;
&lt;span class=&quot;o&quot;&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;cur&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;execute&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&amp;quot;&amp;quot;&amp;quot;select '[10,20)'::int4range&amp;quot;&amp;quot;&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;r&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;cur&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;fetchone&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;r&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;lower&lt;/span&gt;
&lt;span class=&quot;mi&quot;&gt;10&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;r&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;upper_inc&lt;/span&gt;
&lt;span class=&quot;kc&quot;&gt;False&lt;/span&gt;
&lt;/pre&gt;
&lt;p&gt;Of course the Python object can be used as arguments in query parameters:&lt;/p&gt;
&lt;pre class=&quot;code python literal-block&quot;&gt;
&lt;span class=&quot;n&quot;&gt;r&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;DateRange&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;date&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;2013&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;date&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;2013&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'[)'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;cur&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;execute&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&amp;quot;select * from events where &lt;/span&gt;&lt;span class=&quot;si&quot;&gt;%s&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt; &amp;#64;&amp;gt; date&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;r&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;])&lt;/span&gt;
&lt;/pre&gt;
&lt;p&gt;Built-in range types are supported out-of-the-box, while the function &lt;a class=&quot;reference external&quot; href=&quot;/psycopg/docs/extras.html#psycopg2.extras.register_range&quot;&gt;register_range()&lt;/a&gt; allows handling user-defined range types.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;section&quot; id=&quot;connections-and-cursors-as-context-managers&quot;&gt;
&lt;h2&gt;Connections and cursors as context managers&lt;/h2&gt;
&lt;p&gt;A recent DBAPI extension has standardized the use of connections and cursors as context managers: it is now possible to use an idiom such as:&lt;/p&gt;
&lt;pre class=&quot;code python literal-block&quot;&gt;
&lt;span class=&quot;k&quot;&gt;with&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;psycopg2&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;connect&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;DSN&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;as&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;conn&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;with&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;conn&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;cursor&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;as&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;curs&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
       &lt;span class=&quot;n&quot;&gt;curs&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;execute&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;SQL&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;/pre&gt;
&lt;p&gt;with the intuitive behaviour: when the cursor block exits the cursor is closed; when the connection block exits normally the current transaction is committed, if it exits with an exception instead the transaction is rolled back, in either case the connection is ready to be used again (&lt;strong&gt;FIXED:&lt;/strong&gt; the connection is NOT closed as originally stated).&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;section&quot; id=&quot;other-new-features-in-psycopg-2-5&quot;&gt;
&lt;h2&gt;Other new features in Psycopg 2.5&lt;/h2&gt;
&lt;ul class=&quot;simple&quot;&gt;
&lt;li&gt;Added &lt;a class=&quot;reference external&quot; href=&quot;/psycopg/docs/extensions.html#psycopg2.extensions.Diagnostics&quot;&gt;Diagnostics&lt;/a&gt; object to get extended info from a database error.  Many thanks to Matthew Woodcraft for the
implementation (&lt;a class=&quot;reference external&quot; href=&quot;https://github.com/psycopg/psycopg2/issues/149&quot;&gt;ticket #149&lt;/a&gt;).&lt;/li&gt;
&lt;li&gt;Added &lt;tt class=&quot;docutils literal&quot;&gt;connection.cursor_factory&lt;/tt&gt; attribute to customize the default object returned by &lt;tt class=&quot;docutils literal&quot;&gt;cursor()&lt;/tt&gt;.&lt;/li&gt;
&lt;li&gt;Added support for backward scrollable cursors. Thanks to Jon Nelson
for the initial patch (&lt;a class=&quot;reference external&quot; href=&quot;https://github.com/psycopg/psycopg2/issues/108&quot;&gt;ticket #108&lt;/a&gt;).&lt;/li&gt;
&lt;li&gt;Added a simple way to &lt;a class=&quot;reference external&quot; href=&quot;/psycopg/docs/extras.html#adapt-composite&quot;&gt;customize casting of composite types&lt;/a&gt; into Python objects other than namedtuples.
Many thanks to Ronan Dunklau and Tobias Oberstein for the feature
development.&lt;/li&gt;
&lt;li&gt;&lt;a class=&quot;reference external&quot; href=&quot;/psycopg/docs/connection.html#connection.reset&quot;&gt;connection.reset()&lt;/a&gt; implemented using &lt;tt class=&quot;docutils literal&quot;&gt;DISCARD ALL&lt;/tt&gt; on server
versions supporting it.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Bug fixes:&lt;/p&gt;
&lt;ul class=&quot;simple&quot;&gt;
&lt;li&gt;Properly cleanup memory of broken connections (&lt;a class=&quot;reference external&quot; href=&quot;https://github.com/psycopg/psycopg2/issues/148&quot;&gt;ticket #148&lt;/a&gt;).&lt;/li&gt;
&lt;li&gt;Fixed bad interaction of &lt;tt class=&quot;docutils literal&quot;&gt;setup.py&lt;/tt&gt; with other dependencies in
Distribute projects on Python 3 (&lt;a class=&quot;reference external&quot; href=&quot;https://github.com/psycopg/psycopg2/issues/153&quot;&gt;ticket #153&lt;/a&gt;).&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Other changes:&lt;/p&gt;
&lt;ul class=&quot;simple&quot;&gt;
&lt;li&gt;Added support for Python 3.3.&lt;/li&gt;
&lt;li&gt;Dropped support for Python 2.4. Please use Psycopg 2.4.x if you need it.&lt;/li&gt;
&lt;li&gt;&lt;a class=&quot;reference external&quot; href=&quot;/psycopg/docs/errorcodes.html#module-psycopg2.errorcodes&quot;&gt;errorcodes&lt;/a&gt; map updated to PostgreSQL 9.2.&lt;/li&gt;
&lt;li&gt;Dropped Zope adapter from source repository. ZPsycopgDA has now its own
project at &amp;lt;&lt;a class=&quot;reference external&quot; href=&quot;http://github.com/psycopg/ZPsycopgDA&quot;&gt;http://github.com/psycopg/ZPsycopgDA&lt;/a&gt;&amp;gt;.&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
</content>
  </entry>
  <entry xml:base="https://www.psycopg.org/articles/2012/12/12/psycopg-246-released/">
    <title type="text">Psycopg 2.4.6 released</title>
    <id>urn:uuid:66d72d45-3b31-30d3-b4fe-be9145d4d432</id>
    <updated>2012-12-12T00:00:00Z</updated>
    <link href="https://www.psycopg.org/articles/2012/12/12/psycopg-246-released/" />
    <author>
      <name>Daniele Varrazzo</name>
    </author>
    <content type="html">&lt;p&gt;I'm happy to announce the release of Psycopg 2.4.6: a huge thank you to the many contributors.&lt;/p&gt;
&lt;p&gt;This is a bugfix release, introducing no new feature. There are several small corrections in different areas (copy, adaptation, use of extra cursors, stability). The biggest improvements are with the Zope adapter: Zope users using previous 2.4.x versions are encouraged to update to version 2.4.6 soon.&lt;/p&gt;
&lt;ul class=&quot;simple&quot;&gt;
&lt;li&gt;&lt;a class=&quot;reference external&quot; href=&quot;https://pypi.org/packages/source/p/psycopg2/psycopg2-2.4.6.tar.gz&quot;&gt;Download source package&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class=&quot;reference external&quot; href=&quot;https://pypi.org/packages/source/p/psycopg2/psycopg2-2.4.6.tar.gz.asc&quot;&gt;Signature&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;!-- CUT-HERE --&gt;
&lt;div class=&quot;section&quot; id=&quot;what-s-new-in-psycopg-2-4-6&quot;&gt;
&lt;h2&gt;What's new in psycopg 2.4.6&lt;/h2&gt;
&lt;ul class=&quot;simple&quot;&gt;
&lt;li&gt;Fixed 'cursor()' arguments propagation in connection subclasses
and overriding of the 'cursor_factory' argument.  Thanks to
Corry Haines for the report and the initial patch (ticket #105).&lt;/li&gt;
&lt;li&gt;Dropped GIL release during string adaptation around a function call
invoking a Python API function, which could cause interpreter crash.
Thanks to Manu Cupcic for the report (ticket #110).&lt;/li&gt;
&lt;li&gt;Close a green connection if there is an error in the callback.
Maybe a harsh solution but it leaves the program responsive
(ticket #113).&lt;/li&gt;
&lt;li&gt;'register_hstore()', 'register_composite()', 'tpc_recover()' work with
RealDictConnection and Cursor (ticket #114).&lt;/li&gt;
&lt;li&gt;Fixed broken pool for Zope and connections re-init across ZSQL methods
in the same request (tickets #123, #125, #142).&lt;/li&gt;
&lt;li&gt;connect() raises an exception instead of swallowing keyword arguments
when a connection string is specified as well (ticket #131).&lt;/li&gt;
&lt;li&gt;Discard any result produced by 'executemany()' (ticket #133).&lt;/li&gt;
&lt;li&gt;Fixed pickling of FixedOffsetTimezone objects (ticket #135).&lt;/li&gt;
&lt;li&gt;Release the GIL around PQgetResult calls after COPY (ticket #140).&lt;/li&gt;
&lt;li&gt;Fixed empty strings handling in composite caster (ticket #141).&lt;/li&gt;
&lt;li&gt;Fixed pickling of DictRow and RealDictRow objects.&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
</content>
  </entry>
  <entry xml:base="https://www.psycopg.org/articles/2012/10/01/prepared-statements-psycopg/">
    <title type="text">Prepared statements in Psycopg</title>
    <id>urn:uuid:d90e9363-e5f2-3115-8e82-a03295624457</id>
    <updated>2012-10-01T00:00:00Z</updated>
    <link href="https://www.psycopg.org/articles/2012/10/01/prepared-statements-psycopg/" />
    <author>
      <name>Daniele Varrazzo</name>
    </author>
    <content type="html">&lt;p&gt;Although the libpq library supports &lt;a class=&quot;reference external&quot; href=&quot;http://www.postgresql.org/docs/current/static/libpq-exec.html#LIBPQ-PQPREPARE&quot;&gt;prepared statements&lt;/a&gt;, psycopg2 doesn't offer yet a direct way to access the relevant functions. This will probably change in the future, but in the meantime it is possible to use prepared statements in PostgreSQL using the &lt;a class=&quot;reference external&quot; href=&quot;http://www.postgresql.org/docs/current/static/sql-prepare.html&quot;&gt;PREPARE&lt;/a&gt; SQL command.&lt;/p&gt;
&lt;!-- CUT-HERE --&gt;
&lt;p&gt;Whenever you have a loop where the same parametrized query or command is executed:&lt;/p&gt;
&lt;pre class=&quot;code python literal-block&quot;&gt;
&lt;span class=&quot;n&quot;&gt;cur&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;conn&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;cursor&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;j&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;parameters&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;cur&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;execute&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;
        &lt;span class=&quot;s2&quot;&gt;&amp;quot;select * from tables where i = &lt;/span&gt;&lt;span class=&quot;si&quot;&gt;%s&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt; and j = &lt;/span&gt;&lt;span class=&quot;si&quot;&gt;%s&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;j&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;record&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;cur&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;do_something_with&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;record&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;/pre&gt;
&lt;p&gt;you can actually ask PostgreSQL to prepare the plan in advance and use it, saving time in the inner loop:&lt;/p&gt;
&lt;pre class=&quot;code python literal-block&quot;&gt;
&lt;span class=&quot;n&quot;&gt;cur&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;conn&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;cursor&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;cur&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;execute&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;
    &lt;span class=&quot;s2&quot;&gt;&amp;quot;prepare myplan as &amp;quot;&lt;/span&gt;
    &lt;span class=&quot;s2&quot;&gt;&amp;quot;select * from tables where i = $1 and j = $2&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;j&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;parameters&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;cur&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;execute&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&amp;quot;execute myplan (&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;%s&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;, &lt;/span&gt;&lt;span class=&quot;si&quot;&gt;%s&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;)&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;j&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;record&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;cur&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;do_something_with&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;record&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;/pre&gt;
&lt;p&gt;The time saved could be relevant for complex queries which are fast to execute; for queries that instead take several seconds to complete, the planning time is probably negligible so there wouldn't be much to save. Note that the query passed to &lt;tt class=&quot;docutils literal&quot;&gt;PREPARE&lt;/tt&gt; uses Postgres-style placeholders (&lt;tt class=&quot;docutils literal&quot;&gt;$1&lt;/tt&gt;, &lt;tt class=&quot;docutils literal&quot;&gt;$2&lt;/tt&gt;...) instead of the familiar Python-style &lt;tt class=&quot;docutils literal&quot;&gt;%s&lt;/tt&gt; or &lt;tt class=&quot;docutils literal&quot;&gt;%(name)s&lt;/tt&gt;.&lt;/p&gt;
&lt;p&gt;So is psycopg useless in this case? Is the burden of executing &lt;tt class=&quot;docutils literal&quot;&gt;PREPARE&lt;/tt&gt; on the poor user? Well, it's actually easy to write a &lt;a class=&quot;reference external&quot; href=&quot;https://gist.github.com/3797445&quot;&gt;cursor subclass implementing prepared statements&lt;/a&gt;. The proposed &lt;tt class=&quot;docutils literal&quot;&gt;PreparingCursor&lt;/tt&gt; doesn't &lt;tt class=&quot;docutils literal&quot;&gt;PREPARE&lt;/tt&gt; each statement passed to &lt;tt class=&quot;docutils literal&quot;&gt;execute()&lt;/tt&gt;: this would be harmful as it involves an extra roundtrip to the server and the plan for a prepared statements is sometimes less efficient than one calculated with the knowledge of the real parameters used. So the proposed class exposes an explicit &lt;tt class=&quot;docutils literal&quot;&gt;prepare()&lt;/tt&gt; method: it takes a query (written with Python-style placeholders, so exactly the one you would have used with &lt;tt class=&quot;docutils literal&quot;&gt;execute()&lt;/tt&gt;), replaces it with Postgres-style placeholders and &lt;tt class=&quot;docutils literal&quot;&gt;PREPARE&lt;/tt&gt;s it. In further calls to &lt;tt class=&quot;docutils literal&quot;&gt;execute()&lt;/tt&gt; the query can be omitted: in this case (or if the query is the one prepared) the prepared statement is executed instead.&lt;/p&gt;
&lt;p&gt;Using the &lt;tt class=&quot;docutils literal&quot;&gt;PreparingCursor&lt;/tt&gt; the above example could be written as:&lt;/p&gt;
&lt;pre class=&quot;code python literal-block&quot;&gt;
&lt;span class=&quot;n&quot;&gt;cur&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;conn&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;cursor&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;cursor_factory&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;PreparingCursor&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;cur&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;prepare&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;
    &lt;span class=&quot;s2&quot;&gt;&amp;quot;select * from tables where i = &lt;/span&gt;&lt;span class=&quot;si&quot;&gt;%s&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt; and j = &lt;/span&gt;&lt;span class=&quot;si&quot;&gt;%s&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;j&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;parameters&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;cur&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;execute&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;((&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;j&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;record&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;cur&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;do_something_with&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;record&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;/pre&gt;
&lt;p&gt;The preparing cursor also overrides &lt;tt class=&quot;docutils literal&quot;&gt;executemany()&lt;/tt&gt;: in this case the query is always prepared as it is assumed that it will be executed more than once. Other extensions are a &lt;tt class=&quot;docutils literal&quot;&gt;prepared&lt;/tt&gt; attribute, returning the prepared statement if any, and a &lt;tt class=&quot;docutils literal&quot;&gt;deallocate()&lt;/tt&gt; method to release the prepared statement (which would be deleted anyway at the end of the session).&lt;/p&gt;
&lt;p&gt;The preparing cursor may find its way into a future psycopg2 release, but its design is not finalized yet and several details, both in the interface and the implementation, could be done in different ways. So please use it and give us feedback: we'll use it to design the optimal implementation for Psycopg!&lt;/p&gt;
</content>
  </entry>
  <entry xml:base="https://www.psycopg.org/articles/2012/03/29/psycopg-245-released/">
    <title type="text">Psycopg 2.4.5 released</title>
    <id>urn:uuid:dc417146-ac6d-3071-b569-80c3f2dedb69</id>
    <updated>2012-03-29T00:00:00Z</updated>
    <link href="https://www.psycopg.org/articles/2012/03/29/psycopg-245-released/" />
    <author>
      <name>Daniele Varrazzo</name>
    </author>
    <content type="html">&lt;p&gt;Many thanks to everybody that contributed with bug reports and comments to this release!&lt;/p&gt;
&lt;ul class=&quot;simple&quot;&gt;
&lt;li&gt;&lt;a class=&quot;reference external&quot; href=&quot;https://pypi.org/packages/source/p/psycopg2/psycopg2-2.4.5.tar.gz&quot;&gt;Download source package&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class=&quot;reference external&quot; href=&quot;https://pypi.org/packages/source/p/psycopg2/psycopg2-2.4.5.tar.gz.asc&quot;&gt;Signature&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;!-- CUT-HERE --&gt;
&lt;div class=&quot;section&quot; id=&quot;what-s-new-in-psycopg-2-4-5&quot;&gt;
&lt;h2&gt;What's new in psycopg 2.4.5&lt;/h2&gt;
&lt;ul class=&quot;simple&quot;&gt;
&lt;li&gt;The &lt;tt class=&quot;docutils literal&quot;&gt;close()&lt;/tt&gt; methods on connections and cursors don't raise
exceptions
if called on already closed objects.&lt;/li&gt;
&lt;li&gt;Fixed &lt;tt class=&quot;docutils literal&quot;&gt;fetchmany()&lt;/tt&gt; with no argument in cursor subclasses
(ticket #84).&lt;/li&gt;
&lt;li&gt;Use &lt;tt class=&quot;docutils literal&quot;&gt;lo_creat()&lt;/tt&gt; instead of &lt;tt class=&quot;docutils literal&quot;&gt;lo_create()&lt;/tt&gt; when possible for better
interaction with pgpool-II (ticket #88).&lt;/li&gt;
&lt;li&gt;&lt;tt class=&quot;docutils literal&quot;&gt;Error&lt;/tt&gt; and its subclasses are picklable, useful for multiprocessing
interaction (ticket #90).&lt;/li&gt;
&lt;li&gt;Better efficiency and formatting of timezone offset objects thanks
to Menno Smits (tickets #94, #95).&lt;/li&gt;
&lt;li&gt;Fixed &lt;tt class=&quot;docutils literal&quot;&gt;rownumber&lt;/tt&gt; during iteration on cursor subclasses.
Regression introduced in 2.4.4 (ticket #100).&lt;/li&gt;
&lt;li&gt;Added support for &lt;tt class=&quot;docutils literal&quot;&gt;inet&lt;/tt&gt; arrays.&lt;/li&gt;
&lt;li&gt;Fixed &lt;tt class=&quot;docutils literal&quot;&gt;commit()&lt;/tt&gt; concurrency problem (ticket #103).&lt;/li&gt;
&lt;li&gt;Codebase cleaned up using the &lt;a class=&quot;reference external&quot; href=&quot;https://fedorahosted.org/gcc-python-plugin/&quot;&gt;GCC Python plugin&lt;/a&gt;'s &lt;a class=&quot;reference external&quot; href=&quot;http://readthedocs.org/docs/gcc-python-plugin/en/latest/cpychecker.html&quot;&gt;static analysis tool&lt;/a&gt;, which has revealed several unchecked return values, possible
NULL dereferences, reference counting problems. Many thanks to David
Malcolm for the useful tool and the assistance provided using it.&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
</content>
  </entry>
  <entry xml:base="https://www.psycopg.org/articles/2011/12/19/psycopg-244-released/">
    <title type="text">Psycopg 2.4.4 released</title>
    <id>urn:uuid:80d21088-9a8f-3cdb-9e8b-6b0da17413f7</id>
    <updated>2011-12-19T00:00:00Z</updated>
    <link href="https://www.psycopg.org/articles/2011/12/19/psycopg-244-released/" />
    <author>
      <name>Daniele Varrazzo</name>
    </author>
    <content type="html">&lt;p&gt;After a short discussion on this list we decided to change the definitions of isolation levels to make sure old code using numeric constants (both psycopg1 and psycopg2) continue to works. Other small fixes are included in the release: see below for details.&lt;/p&gt;
&lt;ul class=&quot;simple&quot;&gt;
&lt;li&gt;&lt;a class=&quot;reference external&quot; href=&quot;https://pypi.org/packages/source/p/psycopg2/psycopg2-2.4.4.tar.gz&quot;&gt;Download source package&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class=&quot;reference external&quot; href=&quot;https://pypi.org/packages/source/p/psycopg2/psycopg2-2.4.4.tar.gz.asc&quot;&gt;Signature&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;!-- CUT-HERE --&gt;
&lt;div class=&quot;section&quot; id=&quot;what-s-new-in-psycopg-2-4-4&quot;&gt;
&lt;h2&gt;What's new in psycopg 2.4.4&lt;/h2&gt;
&lt;ul class=&quot;simple&quot;&gt;
&lt;li&gt;&lt;tt class=&quot;docutils literal&quot;&gt;register_composite()&lt;/tt&gt; also works with the types implicitly defined
after a table row, not only with the ones created by &lt;tt class=&quot;docutils literal&quot;&gt;CREATE TYPE&lt;/tt&gt;.&lt;/li&gt;
&lt;li&gt;Values for the isolation level symbolic constants restored to what
they were before release 2.4.2 to avoid breaking apps using the
values instead of the constants.&lt;/li&gt;
&lt;li&gt;Named DictCursor/RealDictCursor honour itersize (ticket #80).&lt;/li&gt;
&lt;li&gt;Fixed rollback on error on Zope (ticket #73).&lt;/li&gt;
&lt;li&gt;Raise &lt;tt class=&quot;docutils literal&quot;&gt;DatabaseError&lt;/tt&gt; instead of &lt;tt class=&quot;docutils literal&quot;&gt;Error&lt;/tt&gt; with empty libpq errors,
consistently with other disconnection-related errors: regression
introduced in release 2.4.1 (ticket #82).&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
</content>
  </entry>
  <entry xml:base="https://www.psycopg.org/articles/2011/12/12/psycopg-243-released/">
    <title type="text">Psycopg 2.4.3 released</title>
    <id>urn:uuid:fc3c78b8-8f02-324b-963b-c4c7f3f545ef</id>
    <updated>2011-12-12T00:00:00Z</updated>
    <link href="https://www.psycopg.org/articles/2011/12/12/psycopg-243-released/" />
    <author>
      <name>Daniele Varrazzo</name>
    </author>
    <content type="html">&lt;p&gt;Mostly a bugfix release, with as usual a couple of small feature added:&lt;/p&gt;
&lt;ul class=&quot;simple&quot;&gt;
&lt;li&gt;&lt;a class=&quot;reference external&quot; href=&quot;https://pypi.org/packages/source/p/psycopg2/psycopg2-2.4.3.tar.gz&quot;&gt;Download source package&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class=&quot;reference external&quot; href=&quot;https://pypi.org/packages/source/p/psycopg2/psycopg2-2.4.3.tar.gz.asc&quot;&gt;Signature&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;!-- CUT-HERE --&gt;
&lt;p&gt;Here is what's new in this release:&lt;/p&gt;
&lt;ul class=&quot;simple&quot;&gt;
&lt;li&gt;&lt;a class=&quot;reference external&quot; href=&quot;/docs/module.html#psycopg2.connect&quot;&gt;connect()&lt;/a&gt; supports all the keyword arguments supported by the
database&lt;/li&gt;
&lt;li&gt;Added &lt;a class=&quot;reference external&quot; href=&quot;/docs/extensions.html#psycopg2.extensions.new_array_type&quot;&gt;new_array_type()&lt;/a&gt; function for easy creation of array
typecasters.&lt;/li&gt;
&lt;li&gt;Added support for arrays of &lt;a class=&quot;reference external&quot; href=&quot;/docs/extras.html#hstore-data-type&quot;&gt;hstores&lt;/a&gt; and &lt;a class=&quot;reference external&quot; href=&quot;/docs/extras.html#composite-types-casting&quot;&gt;composite types&lt;/a&gt; (ticket
#66).&lt;/li&gt;
&lt;li&gt;Fixed segfault in case of transaction started with connection lost
(and possibly other events).&lt;/li&gt;
&lt;li&gt;Fixed adaptation of Decimal type in sub-interpreters, such as in
certain mod_wsgi configurations (ticket #52).&lt;/li&gt;
&lt;li&gt;Rollback connections in transaction or in error before putting them
back into a &lt;a class=&quot;reference external&quot; href=&quot;/docs/pool.html&quot;&gt;pool&lt;/a&gt;. Also discard broken connections (ticket #62).&lt;/li&gt;
&lt;li&gt;Lazy import of the slow uuid module, thanks to Marko Kreen.&lt;/li&gt;
&lt;li&gt;Fixed &lt;tt class=&quot;docutils literal&quot;&gt;NamedTupleCursor.executemany()&lt;/tt&gt; (ticket #65).&lt;/li&gt;
&lt;li&gt;Fixed &lt;tt class=&quot;docutils literal&quot;&gt;&lt;span class=&quot;pre&quot;&gt;--static-libpq&lt;/span&gt;&lt;/tt&gt; setup option (ticket #64).&lt;/li&gt;
&lt;li&gt;Fixed interaction between &lt;a class=&quot;reference external&quot; href=&quot;/docs/extras.html#real-dictionary-cursor&quot;&gt;RealDictCursor&lt;/a&gt; and &lt;a class=&quot;reference external&quot; href=&quot;/docs/usage.html#server-side-cursors&quot;&gt;named cursors&lt;/a&gt;
(ticket #67).&lt;/li&gt;
&lt;li&gt;Dropped limit on the columns length in &lt;a class=&quot;reference external&quot; href=&quot;/docs/usage.html#using-copy-to-and-copy-from&quot;&gt;COPY&lt;/a&gt; operations (ticket #68).&lt;/li&gt;
&lt;li&gt;Fixed reference leak with arguments referenced more than once
in queries (ticket #81).&lt;/li&gt;
&lt;li&gt;Fixed typecasting of arrays containing consecutive backslashes.&lt;/li&gt;
&lt;li&gt;&lt;a class=&quot;reference external&quot; href=&quot;/docs/errorcodes.html&quot;&gt;errorcodes&lt;/a&gt; map updated to PostgreSQL 9.1.&lt;/li&gt;
&lt;/ul&gt;
</content>
  </entry>
  <entry xml:base="https://www.psycopg.org/articles/2011/06/12/psycopg-242-released/">
    <title type="text">Psycopg 2.4.2 released</title>
    <id>urn:uuid:56b0e06d-ac51-317a-8826-c6b057871b5a</id>
    <updated>2011-06-12T00:00:00Z</updated>
    <link href="https://www.psycopg.org/articles/2011/06/12/psycopg-242-released/" />
    <author>
      <name>Daniele Varrazzo</name>
    </author>
    <content type="html">&lt;p&gt;Psycopg 2.4.2 has been released: it brings a few small but interesting new features, and a lot of bug fixes.&lt;/p&gt;
&lt;!-- CUT-HERE --&gt;
&lt;p&gt;Transaction control has been overhauled: a new connection method &lt;a class=&quot;reference external&quot; href=&quot;/docs/connection.html#connection.set_session&quot;&gt;set_session()&lt;/a&gt; allows setting all the session properties affecting the transactions behaviour: the &lt;a class=&quot;reference external&quot; href=&quot;http://www.postgresql.org/docs/9.1/static/transaction-iso.html&quot;&gt;isolation level&lt;/a&gt; but it can also be used to have auto-commit, read-only, and deferrable transactions. You can use for example:&lt;/p&gt;
&lt;pre class=&quot;code python literal-block&quot;&gt;
&lt;span class=&quot;n&quot;&gt;conn&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;set_session&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'read committed'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;conn&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;set_session&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;readonly&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;kc&quot;&gt;True&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;autocommit&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;kc&quot;&gt;True&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;conn&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;set_session&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'serializable'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
                 &lt;span class=&quot;n&quot;&gt;readonly&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;kc&quot;&gt;True&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;deferrable&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;kc&quot;&gt;True&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;/pre&gt;
&lt;p&gt;There is also a welcome improvement for all the users thinking that&lt;/p&gt;
&lt;pre class=&quot;code python literal-block&quot;&gt;
&lt;span class=&quot;n&quot;&gt;conn&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;set_isolation_level&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;psycopg2&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;extensions&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ISOLATION_LEVEL_AUTOCOMMIT&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;/pre&gt;
&lt;p&gt;was an excessively verbose syntax: a new read/write property allows to set&lt;/p&gt;
&lt;pre class=&quot;code python literal-block&quot;&gt;
&lt;span class=&quot;n&quot;&gt;conn&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;autocommit&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;True&lt;/span&gt;
&lt;/pre&gt;
&lt;p&gt;a much handier syntax for an often used connection property.&lt;/p&gt;
&lt;p&gt;The improvements to the transactions control are not only at interface level: Psycopg doesn't require any more setup queries when connecting to a database. A sequence of statements:&lt;/p&gt;
&lt;pre class=&quot;code python literal-block&quot;&gt;
&lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;psycopg2&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;conn&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;psycopg2&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;connect&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;''&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;curs&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;conn&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;cursor&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;curs&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;execute&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'SELECT 1'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;curs&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;execute&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'SELECT 2'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;conn&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;commit&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
&lt;/pre&gt;
&lt;p&gt;in older versions of the library would have resulted in the following commands sent to the backend:&lt;/p&gt;
&lt;pre class=&quot;literal-block&quot;&gt;
SHOW default_transaction_isolation
SET DATESTYLE TO 'ISO'
SHOW client_encoding
BEGIN; SET TRANSACTION ISOLATION LEVEL READ COMMITTED
SELECT 1
SELECT 2
COMMIT
&lt;/pre&gt;
&lt;p&gt;In Psycopg 2.4.2 the only commands sent are instead the essential:&lt;/p&gt;
&lt;pre class=&quot;literal-block&quot;&gt;
BEGIN
SELECT 1
SELECT 2
COMMIT
&lt;/pre&gt;
&lt;p&gt;with the &lt;tt class=&quot;docutils literal&quot;&gt;BEGIN&lt;/tt&gt;/&lt;tt class=&quot;docutils literal&quot;&gt;COMMIT&lt;/tt&gt; obviously omitted in autocommit mode (the datestyle and encoding statements were already dropped in 2.3).&lt;/p&gt;
&lt;p&gt;The new release also brings a lot of bug fixes, so we encourage updating soon, particularly if you use Psycopg in multithread programs:&lt;/p&gt;
&lt;ul class=&quot;simple&quot;&gt;
&lt;li&gt;Fixed bug with multithread code potentially causing loss of sync
with the server communication or lock of the client (&lt;a class=&quot;reference external&quot; href=&quot;http://psycopg.lighthouseapp.com/projects/62710/tickets/55&quot;&gt;ticket #55&lt;/a&gt;).&lt;/li&gt;
&lt;li&gt;Don't fail import if mx.DateTime module can't be found, even if its
support was built (&lt;a class=&quot;reference external&quot; href=&quot;http://psycopg.lighthouseapp.com/projects/62710/tickets/53&quot;&gt;ticket #53&lt;/a&gt;): a fix for the &amp;quot;ghost mx.DateTime&amp;quot; issue reported in virtualenv.&lt;/li&gt;
&lt;li&gt;Fixed escape for negative numbers prefixed by minus operator
(&lt;a class=&quot;reference external&quot; href=&quot;http://psycopg.lighthouseapp.com/projects/62710/tickets/57&quot;&gt;ticket #57&lt;/a&gt;).&lt;/li&gt;
&lt;li&gt;Fixed GC race condition during copy in multithread programs, potentially resulting in refcount errors.  Fixed by Dave
Malcolm (&lt;a class=&quot;reference external&quot; href=&quot;http://psycopg.lighthouseapp.com/projects/62710/tickets/58&quot;&gt;ticket #58&lt;/a&gt;, Red Hat &lt;a class=&quot;reference external&quot; href=&quot;https://bugzilla.redhat.com/show_bug.cgi?id=711095&quot;&gt;Bug 711095&lt;/a&gt;).&lt;/li&gt;
&lt;li&gt;Trying to execute concurrent operations on the same connection
through concurrent green thread results in an error instead of a
deadlock.&lt;/li&gt;
&lt;li&gt;Fixed detection of pg_config on Windows. Report and fix, plus some
long needed &lt;tt class=&quot;docutils literal&quot;&gt;setup.py&lt;/tt&gt; cleanup by Steve Lacy: thanks!&lt;/li&gt;
&lt;/ul&gt;
</content>
  </entry>
  <entry xml:base="https://www.psycopg.org/articles/2011/06/05/psycopg-windows-mingw/">
    <title type="text">Building Psycopg on Windows using MinGW</title>
    <id>urn:uuid:eb1cff63-877c-3109-9199-1f5a76bdbd36</id>
    <updated>2011-06-05T00:00:00Z</updated>
    <link href="https://www.psycopg.org/articles/2011/06/05/psycopg-windows-mingw/" />
    <author>
      <name>Daniele Varrazzo</name>
    </author>
    <content type="html">&lt;p&gt;My goal was to install Psycopg on Windows using MinGW and the PostgreSQL binary package.&lt;/p&gt;
&lt;p&gt;I have used the &lt;a class=&quot;reference external&quot; href=&quot;http://www.develer.com/oss/GccWinBinaries&quot;&gt;MinGW GCC binaries&lt;/a&gt; packaged by Giovanni Bajo. The package takes care of a lot of details, for instance registering MinGW as default compiler for Python, plus some magic I don't even want to know, and makes the entire process simple enough.&lt;/p&gt;
&lt;!-- CUT-HERE --&gt;
&lt;p&gt;The first step is to ensure that &lt;tt class=&quot;docutils literal&quot;&gt;setup.py&lt;/tt&gt; can find &lt;tt class=&quot;docutils literal&quot;&gt;pg_config&lt;/tt&gt;. There is a bug causing it not to be found if &lt;em&gt;it is&lt;/em&gt; in the path: it will be fixed in Psycopg 2.4.2. On a few older versions you will have to specify the &lt;tt class=&quot;docutils literal&quot;&gt;pg_config&lt;/tt&gt; path in the &lt;tt class=&quot;docutils literal&quot;&gt;setup.cfg&lt;/tt&gt; or by the &lt;tt class=&quot;docutils literal&quot;&gt;&lt;span class=&quot;pre&quot;&gt;--pg-config&lt;/span&gt;&lt;/tt&gt; option, e.g.&lt;/p&gt;
&lt;pre class=&quot;literal-block&quot;&gt;
python setup.py build_ext --pg-config=C:\path\to\pg_config.exe build
&lt;/pre&gt;
&lt;p&gt;The library built depends on &lt;tt class=&quot;docutils literal&quot;&gt;libpq.dll&lt;/tt&gt;, so at runtime this library should be available, e.g. on the path or it may be copied in the &lt;tt class=&quot;docutils literal&quot;&gt;psycopg2&lt;/tt&gt; directory. The libpq in turn depends on a few other dlls, all found in the PostgreSQL &lt;tt class=&quot;docutils literal&quot;&gt;bin&lt;/tt&gt; directory: &lt;tt class=&quot;docutils literal&quot;&gt;libeay32.dll&lt;/tt&gt;, &lt;tt class=&quot;docutils literal&quot;&gt;ssleay32.dll&lt;/tt&gt; and &lt;tt class=&quot;docutils literal&quot;&gt;&lt;span class=&quot;pre&quot;&gt;libintl-8.dll&lt;/span&gt;&lt;/tt&gt;: they should be made available to the client as well. Unfortunately if any of these libraries is missing you will only get an &amp;quot;ImportError: dll load failed&amp;quot;. The problem is very easy to debug using a &lt;a class=&quot;reference external&quot; href=&quot;http://www.dependencywalker.com/&quot;&gt;dependency walker&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Another problem you may find is building for Python 2.6 and newer: some MinGW versions ship with a broken msvcr90 lib, and the result is again a rather unhelpful ImportError. the dependency walker is useful in this case too, showing the missing &lt;tt class=&quot;docutils literal&quot;&gt;localtime&lt;/tt&gt; function in the library. The bug was reported in the &lt;a class=&quot;reference external&quot; href=&quot;http://bugs.python.org/issue3308&quot;&gt;issue 3308&lt;/a&gt;: my solution was to &lt;a class=&quot;reference external&quot; href=&quot;http://tdm-gcc.tdragon.net/&quot;&gt;download a newer MinGW&lt;/a&gt; and use the &lt;tt class=&quot;docutils literal&quot;&gt;libmsvcr90.a&lt;/tt&gt; from there.&lt;/p&gt;
&lt;p&gt;So, overall, it can be done, but the result still depends on many dlls. I'm torn if the solution could be to have all the dependencies copied in the package directory. Of course you can still use &lt;a class=&quot;reference external&quot; href=&quot;http://www.stickpeople.com/projects/python/win-psycopg/&quot;&gt;Jason's binary package&lt;/a&gt;: he builds both the libpq and the openssl as static libs and creates a self-contained psycopg, which is probably the handiest result, but can't be obtained only using the PostgreSQL binaries.&lt;/p&gt;
</content>
  </entry>
  <entry xml:base="https://www.psycopg.org/articles/2011/05/11/psycopg-241-released/">
    <title type="text">Psycopg 2.4.1 released</title>
    <id>urn:uuid:b7428757-b66a-348e-bd9d-2ffc23a3b6f8</id>
    <updated>2011-05-11T00:00:00Z</updated>
    <link href="https://www.psycopg.org/articles/2011/05/11/psycopg-241-released/" />
    <author>
      <name>Federico Di Gregorio</name>
    </author>
    <content type="html">&lt;p&gt;Hi *,&lt;/p&gt;
&lt;p&gt;Daniele stacked another round of fixes on the devel branch, so it is
time for another release. So, as always, kudos to Daniele and here are
the direct download links:&lt;/p&gt;
&lt;ul class=&quot;simple&quot;&gt;
&lt;li&gt;&lt;a class=&quot;reference external&quot; href=&quot;https://pypi.org/packages/source/p/psycopg2/psycopg2-2.4.1.tar.gz&quot;&gt;Source package&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class=&quot;reference external&quot; href=&quot;https://pypi.org/packages/source/p/psycopg2/psycopg2-2.4.1.tar.gz&quot;&gt;Signature&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Release notes attached, as always. And al always, have fun,&lt;/p&gt;
&lt;p&gt;federico&lt;/p&gt;
&lt;!-- CUT-HERE --&gt;
&lt;div class=&quot;section&quot; id=&quot;what-s-new-in-psycopg-2-4-1&quot;&gt;
&lt;h2&gt;What's new in psycopg 2.4.1&lt;/h2&gt;
&lt;ul class=&quot;simple&quot;&gt;
&lt;li&gt;Use own parser for bytea output, not requiring anymore the libpq 9.0
to parse the hex format.&lt;/li&gt;
&lt;li&gt;Don't fail connection if the client encoding is a non-normalized
variant. Issue reported by Peter Eisentraut.&lt;/li&gt;
&lt;li&gt;Correctly detect an empty query sent to the backend (&lt;a class=&quot;reference external&quot; href=&quot;http://psycopg.lighthouseapp.com/projects/62710/tickets/46&quot;&gt;ticket #46&lt;/a&gt;).&lt;/li&gt;
&lt;li&gt;Fixed a SystemError clobbering libpq errors raised without SQLSTATE.
Bug vivisectioned by Eric Snow.&lt;/li&gt;
&lt;li&gt;Fixed interaction between NamedTuple and server-side cursors.&lt;/li&gt;
&lt;li&gt;Allow to specify --static-libpq on setup.py command line instead of
just in 'setup.cfg'. Patch provided by Matthew Ryan (&lt;a class=&quot;reference external&quot; href=&quot;http://psycopg.lighthouseapp.com/projects/62710/tickets/46&quot;&gt;ticket #48&lt;/a&gt;).&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
</content>
  </entry>
  <entry xml:base="https://www.psycopg.org/articles/2011/02/27/psycopg-24-released/">
    <title type="text">Psycopg 2.4 released</title>
    <id>urn:uuid:2bd86c43-f1e2-3ee3-9414-54897da31c0e</id>
    <updated>2011-02-27T00:00:00Z</updated>
    <link href="https://www.psycopg.org/articles/2011/02/27/psycopg-24-released/" />
    <author>
      <name>Federico Di Gregorio</name>
    </author>
    <content type="html">&lt;p&gt;Hi *,&lt;/p&gt;
&lt;p&gt;this is probably one of the best psycopg releases ever. Daniele, Jason
and all the others that sent patches did an impressive work to have
psycopg build and work flawlessy on all the supported platforms (well..
we can probably do a little bit better on MacOS but everything else is
almost perfect). So here it is (followed by NEWS excerpt, as always):&lt;/p&gt;
&lt;ul class=&quot;simple&quot;&gt;
&lt;li&gt;&lt;a class=&quot;reference external&quot; href=&quot;https://pypi.org/packages/source/p/psycopg2/psycopg2-2.4.tar.gz&quot;&gt;Source code&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class=&quot;reference external&quot; href=&quot;https://pypi.org/packages/source/p/psycopg2/psycopg2-2.4.tar.gz.asc&quot;&gt;Signature&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&quot;line-block&quot;&gt;
&lt;div class=&quot;line&quot;&gt;Have fun,&lt;/div&gt;
&lt;div class=&quot;line&quot;&gt;federico&lt;/div&gt;
&lt;/div&gt;
&lt;!-- CUT-HERE --&gt;
&lt;div class=&quot;section&quot; id=&quot;what-s-new-in-psycopg-2-4&quot;&gt;
&lt;h2&gt;What's new in psycopg 2.4&lt;/h2&gt;
&lt;p&gt;Added support for Python 3.1 and 3.2. The conversion has also
brought several improvements:&lt;/p&gt;
&lt;ul class=&quot;simple&quot;&gt;
&lt;li&gt;Added 'b' and 't' mode to large objects: write can deal with both
bytes strings and unicode; read can return either bytes strings
or decoded unicode.&lt;/li&gt;
&lt;li&gt;COPY sends Unicode data to files implementing 'io.TextIOBase'.&lt;/li&gt;
&lt;li&gt;Improved PostgreSQL-Python encodings mapping.&lt;/li&gt;
&lt;li&gt;Added a few missing encodings: EUC_CN, EUC_JIS_2004, ISO885910,
ISO885916, LATIN10, SHIFT_JIS_2004.&lt;/li&gt;
&lt;li&gt;Dropped repeated dictionary lookups with unicode query/parameters.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Improvements to the named cusors:&lt;/p&gt;
&lt;ul class=&quot;simple&quot;&gt;
&lt;li&gt;More efficient iteration on named cursors, fetching 'itersize'
records at time from the backend.&lt;/li&gt;
&lt;li&gt;The named cursors name can be an invalid identifier.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Improvements in data handling:&lt;/p&gt;
&lt;ul class=&quot;simple&quot;&gt;
&lt;li&gt;Added 'register_composite()' function to cast PostgreSQL
composite types into Python tuples/namedtuples.&lt;/li&gt;
&lt;li&gt;Adapt types 'bytearray' (from Python 2.6), 'memoryview' (from
Python 2.7) and other objects implementing the &amp;quot;Revised Buffer
Protocol&amp;quot; to 'bytea' data type.&lt;/li&gt;
&lt;li&gt;The 'hstore' adapter can work even when the data type is not
installed in the 'public' namespace.&lt;/li&gt;
&lt;li&gt;Raise a clean exception instead of returning bad data when
receiving bytea in 'hex' format and the client libpq can't parse
them.&lt;/li&gt;
&lt;li&gt;Empty lists correctly roundtrip Python -&amp;gt; PostgreSQL -&amp;gt; Python.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Other changes:&lt;/p&gt;
&lt;ul class=&quot;simple&quot;&gt;
&lt;li&gt;'cursor.description' is provided as named tuples if available.&lt;/li&gt;
&lt;li&gt;The build script refuses to guess values if 'pg_config' is not
found.&lt;/li&gt;
&lt;li&gt;Connections and cursors are weakly referenceable.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Bug fixes:&lt;/p&gt;
&lt;ul class=&quot;simple&quot;&gt;
&lt;li&gt;Fixed adaptation of None in composite types (ticket #26). Bug
report by Karsten Hilbert.&lt;/li&gt;
&lt;li&gt;Fixed several reference leaks in less common code paths.&lt;/li&gt;
&lt;li&gt;Fixed segfault when a large object is closed and its connection no
more available.&lt;/li&gt;
&lt;li&gt;Added missing icon to ZPsycopgDA package, not available in Zope
2.12.9 (ticket #30). Bug report and patch by Pumukel.&lt;/li&gt;
&lt;li&gt;Fixed conversion of negative infinity (ticket #40). Bug report and
patch by Marti Raudsepp.&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
</content>
  </entry>
  <entry xml:base="https://www.psycopg.org/articles/2011/02/06/psycopg-24-beta1-released/">
    <title type="text">Psycopg 2.4 beta1 released</title>
    <id>urn:uuid:782481e5-d55c-391e-9f17-6cd6d3f6d22c</id>
    <updated>2011-02-06T00:00:00Z</updated>
    <link href="https://www.psycopg.org/articles/2011/02/06/psycopg-24-beta1-released/" />
    <author>
      <name>Federico Di Gregorio</name>
    </author>
    <content type="html">&lt;p&gt;Hi *,&lt;/p&gt;
&lt;p&gt;me and Daniele, we just went through his series of patches (a loooot of
patches) and we're ready to release a beta version of the new psycopg.
Apart the usual changes and enhancements (detailed below) this is the
first version that supports Python 3 (thanks to, guess who? :)&lt;/p&gt;
&lt;!-- CUT-HERE --&gt;
&lt;p&gt;The NEWS excerpt:&lt;/p&gt;
&lt;div class=&quot;section&quot; id=&quot;new-features-and-changes&quot;&gt;
&lt;h2&gt;New features and changes&lt;/h2&gt;
&lt;ul class=&quot;simple&quot;&gt;
&lt;li&gt;Added &lt;cite&gt;register_composite()&lt;/cite&gt; function to cast PostgreSQL composite
types into Python tuples/namedtuples.&lt;/li&gt;
&lt;li&gt;More efficient iteration on named cursors.&lt;/li&gt;
&lt;li&gt;The build script refuses to guess values if pg_config is not found.&lt;/li&gt;
&lt;li&gt;Connections and cursors are weakly referenceable.&lt;/li&gt;
&lt;li&gt;Added 'b' and 't' mode to large objects: write can deal with both
bytes strings and unicode; read can return either bytes strings or
decoded unicode.&lt;/li&gt;
&lt;li&gt;COPY sends Unicode data to files implementing io.TextIOBase.&lt;/li&gt;
&lt;li&gt;The build script refuses to guess values if pg_config is not found.&lt;/li&gt;
&lt;li&gt;Improved PostgreSQL-Python encodings mapping. Added a few
missing encodings: EUC_CN, EUC_JIS_2004, ISO885910, ISO885916,
LATIN10, SHIFT_JIS_2004.&lt;/li&gt;
&lt;li&gt;Dropped repeated dictionary lookups with unicode query/parameters.&lt;/li&gt;
&lt;li&gt;Empty lists correctly roundtrip Python -&amp;gt; PostgreSQL -&amp;gt; Python.&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class=&quot;section&quot; id=&quot;bug-fixes&quot;&gt;
&lt;h2&gt;Bug fixes&lt;/h2&gt;
&lt;ul class=&quot;simple&quot;&gt;
&lt;li&gt;Fixed adaptation of None in composite types (ticket #26). Bug
report by Karsten Hilbert.&lt;/li&gt;
&lt;li&gt;Fixed several reference leaks in less common code paths.&lt;/li&gt;
&lt;li&gt;Fixed segfault when a large object is closed and its connection no
more available.&lt;/li&gt;
&lt;li&gt;Added missing icon to ZPsycopgDA package, not available in Zope
2.12.9 (ticket #30). Bug report and patch by Pumukel.&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&quot;line-block&quot;&gt;
&lt;div class=&quot;line&quot;&gt;Have fun,&lt;/div&gt;
&lt;div class=&quot;line&quot;&gt;federico&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
</content>
  </entry>
  <entry xml:base="https://www.psycopg.org/articles/2011/01/24/psycopg2-porting-python-3-report/">
    <title type="text">psycopg2 porting to Python 3: a report</title>
    <id>urn:uuid:cfea95fd-c594-308f-bb0d-97772a105112</id>
    <updated>2011-01-24T00:00:00Z</updated>
    <link href="https://www.psycopg.org/articles/2011/01/24/psycopg2-porting-python-3-report/" />
    <author>
      <name>Daniele Varrazzo</name>
    </author>
    <content type="html">&lt;p&gt;I've mostly finished the porting of psycopg2 to Python 3. Here is a
report of what done and what can be improved.&lt;/p&gt;
&lt;!-- CUT-HERE --&gt;
&lt;p&gt;The code is available in the python3 branch of the repository
available on &amp;lt;&lt;a class=&quot;reference external&quot; href=&quot;https://github.com/dvarrazzo/psycopg&quot;&gt;https://github.com/dvarrazzo/psycopg&lt;/a&gt;&amp;gt;. The code is
compatible with both python2 and python3: the Python code is in py2
syntax: setup.py processes it with 2to3 before installation. The C
code uses a macros portability layer (in &lt;tt class=&quot;docutils literal&quot;&gt;psycopg/python.h&lt;/tt&gt;) to have py2
and py3 code unified.&lt;/p&gt;
&lt;p&gt;A big chunk of the porting is by Martin von Löwis (who I thank
wholeheartedly): who provided a big patch back in 2008 (against 2.0.9,
IIRC). Unfortunately psycopg code diverged without the patch being
merged or maintained, so I basically used his macros but re-did the
work from scratch, refactoring the code instead of patching many
repetitive parts. On the pro side, since then, psycopg gained many
more tests.&lt;/p&gt;
&lt;p&gt;Large part of the porting has been mechanical, nothing to say about
that. What has required decisions has been instead the string
processing: Py3 uses extensively Unicode, but the communication with
the libpq is performed in char*; being psycopg a programmable
interface the point in which the conversion happens changes how
adapters and typecasters should be written.&lt;/p&gt;
&lt;div class=&quot;section&quot; id=&quot;adapters&quot;&gt;
&lt;h2&gt;Adapters&lt;/h2&gt;
&lt;p&gt;they are objects wrapping any Python object and returning a SQL
representation to be passed to the libpq. The adapters may have
returned either a str or an unicode, but a critical step is to pass
through libpq functions to have string and binary data escaped (e.g.
PQescapeStringConn). Because these functions are defined char* -&amp;gt;
char*, what makes sense for me was to force adapters to return bytes:
having them returning unicode would mean that unicode strings should
have been:&lt;/p&gt;
&lt;ul class=&quot;simple&quot;&gt;
&lt;li&gt;converted to bytes&lt;/li&gt;
&lt;li&gt;escaped by the libpq&lt;/li&gt;
&lt;li&gt;converted back to unicode to be returned from the adapter (but at this point which encoding to use is not clear)&lt;/li&gt;
&lt;li&gt;merged to the query&lt;/li&gt;
&lt;li&gt;converted to bytes again to be sent to the socket&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;The double encoding seems unnecessary, so I prefer to have adapters to
return bytes. Having them free to return either bytes or unicode makes
writing composite adapters trickier and more error prone, so my
decision is to raise an exception if after adaptation a non-bytes
object is returned.&lt;/p&gt;
&lt;p&gt;Having adapted objects as bytes means that the arguments must be
merged to the query as bytes: this operation is performed by not much
more than a &lt;tt class=&quot;docutils literal&quot;&gt;query % args&lt;/tt&gt;. Unfortunately the % operator is not
available for bytes, so I have ported the &lt;tt class=&quot;docutils literal&quot;&gt;PyString_Format&lt;/tt&gt; from Python
2.7 and adapted to work with the bytes (the Python license seems
allowing mixing derived code with the LGPL without problems).&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;section&quot; id=&quot;typecasters&quot;&gt;
&lt;h2&gt;Typecasters&lt;/h2&gt;
&lt;p&gt;These are function performing the opposite: they take the PostgreSQL
representation of a value and convert it into a Python object. They
receive bytes from the libpq of course. What I have currently
implemented is to convert this string to unicode before passing it to
the Python functions: because in Python the parsing functions mostly
take strings as argument (meaning unicode in py3), passing bytes to the typecasters would have meant that each of them
should have implemented about the same boilerplate, something like:&lt;/p&gt;
&lt;pre class=&quot;literal-block&quot;&gt;
def caster(value, curs):
    value = value.decode(
        psycopg.encodings[curs.connection.encoding])
&lt;/pre&gt;
&lt;p&gt;but only in Py3, not in Py2. The current approach (passing an already decoded object) makes writing the typecasters easier, but has the drawback of making
impossible to write a Python typecaster for a binary type (but I don't
think there is really the need for such caster) and it is kinda
inconsistent with the adapters (dealing with bytes). What option would be better?&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;section&quot; id=&quot;copy&quot;&gt;
&lt;h2&gt;COPY&lt;/h2&gt;
&lt;p&gt;Copy operations deal with Python files or file-like objects. In input
(COPY IN) both unicode and bytes files are accepted; unicode is
converted in the connection encoding. In output (COPY OUT)... oops:
reviewing now I see I've overlooked this part: as it is now the data
(bytes) from the libpq are passed to &lt;tt class=&quot;docutils literal&quot;&gt;file.write()&lt;/tt&gt; using
&lt;tt class=&quot;docutils literal&quot;&gt;PyObject_CallFunction(func, &lt;span class=&quot;pre&quot;&gt;&amp;quot;s#&amp;quot;,&lt;/span&gt; buffer, len)&lt;/tt&gt;. But this implies that
buffer is decoded from utf8 in Py3, so it would break if the
connection encoding was different. I've done a quick check and in Py3
a file open in text mode doesn't accept bytes, while one open in
binary mode doesn't accept unicode. Uhm... what could we pass this
file? Is there an interface in Python 3 to know if a file is binary or
text? Added ticket &lt;a class=&quot;reference external&quot; href=&quot;http://psycopg.lighthouseapp.com/projects/62710/tickets/36&quot;&gt;#36&lt;/a&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;section&quot; id=&quot;large-objects&quot;&gt;
&lt;h2&gt;Large Objects&lt;/h2&gt;
&lt;p&gt;These are open using a mode string such as &amp;quot;r&amp;quot;, &amp;quot;w&amp;quot;, &amp;quot;rw&amp;quot;. I have
added a format letter pretty much as the open() function in Py3: it
can be &amp;quot;b&amp;quot; or &amp;quot;t&amp;quot;. In binary mode the file always returns bytes (str
in py2, bytes [edit: not unicode] in py3). In text mode it always returns unicode
(unicode in py2, str in py3). The default is &amp;quot;b&amp;quot; in py2, &amp;quot;t&amp;quot; in py3.
writing to the file accepts both str and unicode. This means that in
Py2 everything is compatible, but there are a few features added
(unicode communication) and it's easy to write portable code by
specifying the mode &amp;quot;b&amp;quot; or &amp;quot;t&amp;quot;.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;section&quot; id=&quot;other-random-details&quot;&gt;
&lt;h2&gt;Other random details&lt;/h2&gt;
&lt;ul class=&quot;simple&quot;&gt;
&lt;li&gt;in py2 psycopg uses basic string as default, and unicode must be chosen specifically (e.g. registering the adapter, passing a unicode=True to certain functions etc.) In py3 there is no such choice and unicode is returned where there used to be a choice.&lt;/li&gt;
&lt;li&gt;bytea fields are returned as MemoryView, from which is easy to get bytes.&lt;/li&gt;
&lt;li&gt;&amp;quot;secondary strings&amp;quot; (notices, notifications, errors...) are decoded in the connection encoding, but I'm not be 100% sure that this will be always right, so the decoding is forgiving: decode(x, 'replace') for them.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;This should be pretty much everything about the Py3 porting. Comments
are welcome, above all on the open points (typecasters and COPY OUT),
but if there is anything to point out I'd be happy to know. Best option would be to discuss on the &lt;a class=&quot;reference external&quot; href=&quot;http://mail.postgresql.org/mj/mj_wwwusr/domain=postgresql.org?func=lists-long-full&amp;amp;extra=psycopg&quot;&gt;mailing list&lt;/a&gt;. See you there!&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Update:&lt;/strong&gt; &lt;a class=&quot;reference external&quot; href=&quot;/articles/2011/02/06/psycopg-24-beta1-released/&quot;&gt;Psycopg 2.4 beta 1 has been released&lt;/a&gt; with Python 3 support.&lt;/p&gt;
&lt;/div&gt;
</content>
  </entry>
  <entry xml:base="https://www.psycopg.org/articles/2011/01/08/new-psycopg-mailing-list-online/">
    <title type="text">New Psycopg Mailing List Online!</title>
    <id>urn:uuid:51e647fb-5baa-3885-8edf-170af0f6ed36</id>
    <updated>2011-01-08T00:00:00Z</updated>
    <link href="https://www.psycopg.org/articles/2011/01/08/new-psycopg-mailing-list-online/" />
    <author>
      <name>Daniele Varrazzo</name>
    </author>
    <content type="html">&lt;p&gt;After a long while Psycopg has a Mailing List again!&lt;/p&gt;
&lt;p&gt;You are welcome to &lt;a class=&quot;reference external&quot; href=&quot;http://mail.postgresql.org/mj/mj_wwwusr/domain=postgresql.org?func=lists-long-full&amp;amp;extra=psycopg&quot;&gt;subscribe&lt;/a&gt;, either if you are an user dealing with the first stumbling blocks (albeit a look at the &lt;a class=&quot;reference external&quot; href=&quot;/docs/&quot;&gt;documentation&lt;/a&gt; or the &lt;a class=&quot;reference external&quot; href=&quot;/docs/faq.html&quot;&gt;FAQ&lt;/a&gt; wouldn't hurt!) or if you want to contribute to the psycopg2 development, about which there are several upcoming news.&lt;/p&gt;
&lt;p&gt;To post, send mail to &amp;lt;&lt;a class=&quot;reference external&quot; href=&quot;mailto:psycopg&amp;#64;postgresql.org&quot;&gt;psycopg&amp;#64;postgresql.org&lt;/a&gt;&amp;gt;. Yes, we are proud to be hosted on the mighty shoulders of the &lt;strong&gt;PostgreSQL Infrastructure team&lt;/strong&gt;. I want to thank them and the &lt;strong&gt;PostgreSQL Global Development Group&lt;/strong&gt; wholeheartedly for making this happen.&lt;/p&gt;
&lt;p&gt;See you there!&lt;/p&gt;
</content>
  </entry>
  <entry xml:base="https://www.psycopg.org/articles/2010/12/20/psycopg-232-released/">
    <title type="text">Psycopg 2.3.2 released</title>
    <id>urn:uuid:de4adce1-c1b8-31ff-8bc0-ff97be98d62b</id>
    <updated>2010-12-20T00:00:00Z</updated>
    <link href="https://www.psycopg.org/articles/2010/12/20/psycopg-232-released/" />
    <author>
      <name>Daniele Varrazzo</name>
    </author>
    <content type="html">&lt;p&gt;Hello,&lt;/p&gt;
&lt;p&gt;just released Psycopg 2.3.2. The release fixes &lt;a class=&quot;reference external&quot; href=&quot;http://psycopg.lighthouseapp.com/projects/62710/tickets/24&quot;&gt;a bug&lt;/a&gt; reported in 2.3.0 and 2.3.1 preventing Psycopg to connect to pgBouncer. Thanks to Marti Raudsepp for the bug report and the patch.&lt;/p&gt;
&lt;!-- CUT-HERE --&gt;
&lt;p&gt;Download from here:&lt;/p&gt;
&lt;ul class=&quot;simple&quot;&gt;
&lt;li&gt;&lt;a class=&quot;reference external&quot; href=&quot;https://pypi.org/packages/source/p/psycopg2/psycopg2-2.3.2.tar.gz&quot;&gt;source package&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class=&quot;reference external&quot; href=&quot;https://pypi.org/packages/source/p/psycopg2/psycopg2-2.3.2.tar.gz.asc&quot;&gt;signature&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Cheers!&lt;/p&gt;
</content>
  </entry>
  <entry xml:base="https://www.psycopg.org/articles/2010/12/04/psycopg-231-released/">
    <title type="text">Psycopg 2.3.1 released</title>
    <id>urn:uuid:7d8288ee-1236-3f25-8adb-4dee553f9d47</id>
    <updated>2010-12-04T00:00:00Z</updated>
    <link href="https://www.psycopg.org/articles/2010/12/04/psycopg-231-released/" />
    <author>
      <name>Daniele Varrazzo</name>
    </author>
    <content type="html">&lt;p&gt;Hello,&lt;/p&gt;
&lt;p&gt;just released Psycopg 2.3.1. No new feature since &lt;a class=&quot;reference external&quot; href=&quot;/psycopg/articles/2010/12/01/psycopg-230-released/&quot;&gt;release 2.3.0&lt;/a&gt;: the only fix is for a build issue on CentOS 5.5 x86_64 (&lt;a class=&quot;reference external&quot; href=&quot;http://psycopg.lighthouseapp.com/projects/62710/tickets/23&quot;&gt;ticket #23&lt;/a&gt;).&lt;/p&gt;
&lt;!-- CUT-HERE --&gt;
&lt;p&gt;Download URLs:&lt;/p&gt;
&lt;ul class=&quot;simple&quot;&gt;
&lt;li&gt;&lt;a class=&quot;reference external&quot; href=&quot;https://pypi.org/packages/source/p/psycopg2/psycopg2-2.3.1.tar.gz&quot;&gt;Psycopg 2.3.1 source package&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class=&quot;reference external&quot; href=&quot;https://pypi.org/packages/source/p/psycopg2/psycopg2-2.3.1.tar.gz.asc&quot;&gt;Psycopg 2.3.1 signature&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Cheers!&lt;/p&gt;
</content>
  </entry>
  <entry xml:base="https://www.psycopg.org/articles/2010/12/01/postgresql-notifications-psycopg2-eventlet/">
    <title type="text">PostgreSQL notifications with Psycopg2 and Eventlet</title>
    <id>urn:uuid:a7f01feb-2086-3b11-8991-d0c3a1ee01e5</id>
    <updated>2010-12-01T00:00:00Z</updated>
    <link href="https://www.psycopg.org/articles/2010/12/01/postgresql-notifications-psycopg2-eventlet/" />
    <author>
      <name>Daniele Varrazzo</name>
    </author>
    <content type="html">&lt;p&gt;PostgreSQL supports &lt;a class=&quot;reference external&quot; href=&quot;http://www.postgresql.org/docs/9.0/interactive/sql-notify.html&quot;&gt;asynchronous notifications&lt;/a&gt;, a simple messaging system allowing clients to be notified about events occurred in the database. Notifications can be sent by any session using a &amp;quot;&lt;tt class=&quot;docutils literal&quot;&gt;NOTIFY&lt;/tt&gt; &lt;em&gt;channel&lt;/em&gt;&amp;quot; command and will be received by any session which has subscribed with a &lt;tt class=&quot;docutils literal&quot;&gt;LISTEN&lt;/tt&gt; &lt;em&gt;channel&lt;/em&gt; to receive updates. The system has been greatly improved in PostgreSQL 9.0 with the addition of a &lt;em&gt;message payload&lt;/em&gt;, making the feature even more useful. Previously a typical use case would have been to notify interested sessions that a certain table was updated: now it is possible to signal for instance &lt;em&gt;which record&lt;/em&gt; was changed. You can put the &lt;tt class=&quot;docutils literal&quot;&gt;NOTIFY&lt;/tt&gt; command in a database trigger for automatic notifications on insert or update... the possibilities are actually quite interesting.&lt;/p&gt;
&lt;!-- CUT-HERE --&gt;
&lt;p&gt;Psycopg2 allows a client program to &lt;a class=&quot;reference external&quot; href=&quot;/docs/advanced.html#asynchronous-notifications&quot;&gt;receive notifications from the database backend&lt;/a&gt;. Starting from version 2.3 the notification received will also include the payload, when connected to a PostgreSQL 9.0 server. The notification are received automatically after each query and are made available in the &lt;a class=&quot;reference external&quot; href=&quot;:/docs/connection.html#connection.notifies&quot;&gt;&lt;tt class=&quot;docutils literal&quot;&gt;notifies&lt;/tt&gt;&lt;/a&gt; attribute of the connection. They are also received using the &lt;a class=&quot;reference external&quot; href=&quot;/docs/connection.html#connection.poll&quot;&gt;&lt;tt class=&quot;docutils literal&quot;&gt;poll()&lt;/tt&gt;&lt;/a&gt; method, without the need of issuing queries only to receive notifications.&lt;/p&gt;
&lt;p&gt;But polling a connection is not the most efficient nor timely way to receive notifications: a better approach is to ask the OS to wake us up when there is something to read on the connection socket. This approach is particularly appealing when using an event-driven framework such as &lt;a class=&quot;reference external&quot; href=&quot;http://twistedmatrix.com/&quot;&gt;Twisted&lt;/a&gt; or &lt;a class=&quot;reference external&quot; href=&quot;http://eventlet.net/&quot;&gt;Eventlet&lt;/a&gt;, with which is easy to perform other tasks while there is nothing to read on the connection. In &amp;quot;regular&amp;quot; Python programs it is possible to use &lt;tt class=&quot;docutils literal&quot;&gt;select()&lt;/tt&gt; to block until a notification arrives (see the documentation for an example): this would block the entire program. If some concurrency is required it is possible to use the blocking syscall in a thread to allow the rest of the program to carry on.&lt;/p&gt;
&lt;div class=&quot;section&quot; id=&quot;eventlet-example&quot;&gt;
&lt;h2&gt;Eventlet example&lt;/h2&gt;
&lt;p&gt;This example shows how hook the notifications system into Eventlet: using it with a &lt;a class=&quot;reference external&quot; href=&quot;http://en.wikipedia.org/wiki/WebSockets&quot;&gt;WebSocket&lt;/a&gt; it is possible to send an event from the database to the application and up to a web browser, all in push mode! The example requires PostgreSQL 9.0 and Psycopg 2.3 as it uses notification payloads.&lt;/p&gt;
&lt;p&gt;This function handles a WebSocket connection in a green thread: it creates a &lt;tt class=&quot;docutils literal&quot;&gt;Queue&lt;/tt&gt; and opens a database connection (calling the &lt;tt class=&quot;docutils literal&quot;&gt;dblisten()&lt;/tt&gt; function), then blocks on the queue waiting to receive notifications: as soon as any is received, its payload is forwarded to the browser. This is obviously just an example: a database connection for every browser wouldn't scale very much...&lt;/p&gt;
&lt;pre class=&quot;code python literal-block&quot;&gt;
&lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;eventlet&lt;/span&gt;
&lt;span class=&quot;kn&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;eventlet&lt;/span&gt; &lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;wsgi&lt;/span&gt;
&lt;span class=&quot;kn&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;eventlet&lt;/span&gt; &lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;websocket&lt;/span&gt;

&lt;span class=&quot;nd&quot;&gt;&amp;#64;websocket&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;WebSocketWSGI&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;handle&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ws&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
    &lt;span class=&quot;sd&quot;&gt;&amp;quot;&amp;quot;&amp;quot;
    Receive a connection and send it database notifications.
    &amp;quot;&amp;quot;&amp;quot;&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;q&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;eventlet&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Queue&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;eventlet&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;spawn&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;dblisten&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;q&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;while&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;n&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;q&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;get&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
        &lt;span class=&quot;nb&quot;&gt;print&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;n&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;ws&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;send&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;n&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;payload&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;/pre&gt;
&lt;p&gt;When &lt;tt class=&quot;docutils literal&quot;&gt;handle()&lt;/tt&gt; blocks on the queue the control of the program switches to a different green thread, allowing the rest of the program to keep on running even if single-threaded.&lt;/p&gt;
&lt;p&gt;The &lt;tt class=&quot;docutils literal&quot;&gt;dblisten&lt;/tt&gt; function sets up the listening database connection:&lt;/p&gt;
&lt;pre class=&quot;code python literal-block&quot;&gt;
&lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;psycopg2&lt;/span&gt;
&lt;span class=&quot;kn&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;psycopg2.extensions&lt;/span&gt; &lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ISOLATION_LEVEL_AUTOCOMMIT&lt;/span&gt;
&lt;span class=&quot;kn&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;eventlet.hubs&lt;/span&gt; &lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;trampoline&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;dblisten&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;q&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
    &lt;span class=&quot;sd&quot;&gt;&amp;quot;&amp;quot;&amp;quot;
    Open a db connection and add notifications to *q*.
    &amp;quot;&amp;quot;&amp;quot;&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;cnn&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;psycopg2&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;connect&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;dsn&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;cnn&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;set_isolation_level&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ISOLATION_LEVEL_AUTOCOMMIT&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;cur&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;cnn&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;cursor&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;cur&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;execute&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&amp;quot;LISTEN data;&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;while&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;trampoline&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;cnn&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;read&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;kc&quot;&gt;True&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;cnn&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;poll&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;while&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;cnn&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;notifies&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;n&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;cnn&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;notifies&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;pop&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;q&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;put&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;n&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;/pre&gt;
&lt;p&gt;The connection is set in &lt;a class=&quot;reference external&quot; href=&quot;/docs/usage.html#transactions-control&quot;&gt;autocommit mode&lt;/a&gt;, otherwise the notification would be postponed until the end of the transaction. The &lt;em&gt;trampoline&lt;/em&gt; is the Eventlet function that schedules a green thread switch: we ask it to return us the control when the file descriptor underlying the connection will have something to read. Once the system wakes up again we use &lt;tt class=&quot;docutils literal&quot;&gt;poll()&lt;/tt&gt; to parse eventual notifications received, that will be added to the queue and thus passed to the client.&lt;/p&gt;
&lt;p&gt;The rest of the example is not shown here: it only consists in a static page and the web server setup. You can &lt;a class=&quot;reference external&quot; href=&quot;pushdemo.py&quot;&gt;download the complete example&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Running the program and opening the page &lt;a class=&quot;reference external&quot; href=&quot;http://localhost:7000/&quot;&gt;http://localhost:7000/&lt;/a&gt; in a WebSocket-enabled browser you will see a page with three coloured bars: using a command such as &lt;tt class=&quot;docutils literal&quot;&gt;NOTIFY data, 'green'&lt;/tt&gt; in a psql shell, one of the bars in the page will be updated accordingly. Here is a screenshot:&lt;/p&gt;
&lt;img alt=&quot;psycopg eventlet push demo&quot; class=&quot;align-center&quot; src=&quot;pushdemo.png&quot; style=&quot;width: 477px; height: 327px;&quot; /&gt;
&lt;/div&gt;
</content>
  </entry>
  <entry xml:base="https://www.psycopg.org/articles/2010/12/01/psycopg-230-released/">
    <title type="text">Psycopg 2.3.0 released</title>
    <id>urn:uuid:2166f1d2-38c2-32b9-b6d9-d3f99e0c72a7</id>
    <updated>2010-12-01T00:00:00Z</updated>
    <link href="https://www.psycopg.org/articles/2010/12/01/psycopg-230-released/" />
    <author>
      <name>Federico Di Gregorio</name>
    </author>
    <content type="html">&lt;p&gt;Hi *,&lt;/p&gt;
&lt;p&gt;lately my involvment on psycopg has been quite small (work and other
projects are taking their toll) but thanks to Daniele (with some help
from Jan) here is a new psycopg2 release. The number of changes is big
(an excerpt from the NEWS file is at the end, as always) so we decided
to bump up the version to 2.3.0 and to test, and test... and test. We
tested this new release on Linux and Windows, with Python 2.4, 2.5, 2.6,
2.7 and on PostgreSQL from 7.4 to 9.0.&lt;/p&gt;
&lt;!-- CUT-HERE --&gt;
&lt;p&gt;As always, signed download from:&lt;/p&gt;
&lt;ul class=&quot;simple&quot;&gt;
&lt;li&gt;&lt;a class=&quot;reference external&quot; href=&quot;https://pypi.org/packages/source/p/psycopg2/psycopg2-2.3.0.tar.gz&quot;&gt;https://pypi.org/packages/source/p/psycopg2/psycopg2-2.3.0.tar.gz&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class=&quot;reference external&quot; href=&quot;https://pypi.org/packages/source/p/psycopg2/psycopg2-2.3.0.tar.gz.asc&quot;&gt;https://pypi.org/packages/source/p/psycopg2/psycopg2-2.3.0.tar.gz.asc&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Have fun,
federico&lt;/p&gt;
&lt;p&gt;And here are the NEWS:&lt;/p&gt;
&lt;p&gt;psycopg 2.3 aims to expose some new features introduced in PostgreSQL 9.0.&lt;/p&gt;
&lt;div class=&quot;section&quot; id=&quot;main-new-features&quot;&gt;
&lt;h2&gt;Main new features&lt;/h2&gt;
&lt;ul class=&quot;simple&quot;&gt;
&lt;li&gt;&lt;tt class=&quot;docutils literal&quot;&gt;dict&lt;/tt&gt; to &lt;tt class=&quot;docutils literal&quot;&gt;hstore&lt;/tt&gt; adapter and &lt;tt class=&quot;docutils literal&quot;&gt;hstore&lt;/tt&gt; to &lt;tt class=&quot;docutils literal&quot;&gt;dict&lt;/tt&gt; typecaster, using
both 9.0 and pre-9.0 syntax.&lt;/li&gt;
&lt;li&gt;Two-phase commit protocol support as per DBAPI specification.&lt;/li&gt;
&lt;li&gt;Support for payload in notifications received from the backed.&lt;/li&gt;
&lt;li&gt;&lt;tt class=&quot;docutils literal&quot;&gt;namedtuple&lt;/tt&gt;-returning cursor.&lt;/li&gt;
&lt;li&gt;Query execution cancel.&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class=&quot;section&quot; id=&quot;other-features-and-changes&quot;&gt;
&lt;h2&gt;Other features and changes&lt;/h2&gt;
&lt;ul class=&quot;simple&quot;&gt;
&lt;li&gt;Dropped support for protocol 2: Psycopg 2.3 can only connect to
PostgreSQL servers with version at least 7.4.&lt;/li&gt;
&lt;li&gt;Don't issue a query at every connection to detect the client
encoding and to set the datestyle to ISO if it is already
compatible with what expected.&lt;/li&gt;
&lt;li&gt;&lt;tt class=&quot;docutils literal&quot;&gt;mogrify()&lt;/tt&gt; now supports unicode queries.&lt;/li&gt;
&lt;li&gt;Subclasses of a type that can be adapted are adapted as the
superclass.&lt;/li&gt;
&lt;li&gt;&lt;tt class=&quot;docutils literal&quot;&gt;errorcodes&lt;/tt&gt; knows a couple of new codes introduced in PostgreSQL
9.0.&lt;/li&gt;
&lt;li&gt;Dropped deprecated Psycopg &amp;quot;own quoting&amp;quot;.&lt;/li&gt;
&lt;li&gt;Never issue a ROLLBACK on close/GC. This behaviour was introduced
as a bug in release 2.2, but trying to send a command while being
destroyed has been considered not safe.&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class=&quot;section&quot; id=&quot;bug-fixes&quot;&gt;
&lt;h2&gt;Bug fixes&lt;/h2&gt;
&lt;ul class=&quot;simple&quot;&gt;
&lt;li&gt;Fixed use of &lt;tt class=&quot;docutils literal&quot;&gt;PQfreemem&lt;/tt&gt; instead of &lt;tt class=&quot;docutils literal&quot;&gt;free&lt;/tt&gt; in binary typecaster.&lt;/li&gt;
&lt;li&gt;Fixed access to freed memory in &lt;tt class=&quot;docutils literal&quot;&gt;conn_get_isolation_level()&lt;/tt&gt;.&lt;/li&gt;
&lt;li&gt;Fixed crash during Decimal adaptation with a few 2.5.x Python
versions (&lt;a class=&quot;reference external&quot; href=&quot;http://psycopg.lighthouseapp.com/projects/62710/tickets/7&quot;&gt;ticket #7&lt;/a&gt;).&lt;/li&gt;
&lt;li&gt;Fixed notices order (&lt;a class=&quot;reference external&quot; href=&quot;http://psycopg.lighthouseapp.com/projects/62710/tickets/9&quot;&gt;ticket #9&lt;/a&gt;).&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
</content>
  </entry>
  <entry xml:base="https://www.psycopg.org/articles/2010/11/12/psycopg-pgday-italy-2010/">
    <title type="text">Psycopg at PGDay Italy 2010</title>
    <id>urn:uuid:1527e60b-1619-34f5-a37f-7ace0edf1c3b</id>
    <updated>2010-11-12T00:00:00Z</updated>
    <link href="https://www.psycopg.org/articles/2010/11/12/psycopg-pgday-italy-2010/" />
    <author>
      <name>Daniele Varrazzo</name>
    </author>
    <content type="html">&lt;a class=&quot;reference external image-reference&quot; href=&quot;http://2010.pgday.it/&quot;&gt;&lt;img alt=&quot;PGDay Roma, 10 Dicembre 2010&quot; class=&quot;inline-right&quot; src=&quot;banner_200x60.gif&quot; style=&quot;width: 200px; height: 60px;&quot; /&gt;&lt;/a&gt;
&lt;p&gt;Psycopg will be at PGDay Italy in Rome, on December 10th.&lt;/p&gt;
&lt;!-- CUT-HERE --&gt;
&lt;p&gt;Psycopg sarà a Roma per il &lt;a class=&quot;reference external&quot; href=&quot;http://2010.pgday.it/&quot;&gt;PGDay 2010&lt;/a&gt; con ben due interventi:&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Accedere a PostgreSQL da Python: uso di base di Psycopg&lt;/strong&gt;: sarà un tutorial di base su come usare Python per accedere a PostgreSQL, presentato come una sessione interattiva e adatto ai principianti.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Uso avanzato di Psycopg per l'accesso a PostgreSQL da Python&lt;/strong&gt;: illustrerà le tecniche più avanzate messe a disposizione dalla libreria (query e notifiche asincrone, cursori lato server, data mapping tra Python e PostgreSQL) e le ultime novità introdotte nella libreria (mapping di dizionari con &lt;tt class=&quot;docutils literal&quot;&gt;hstore&lt;/tt&gt;, two-phase commit).&lt;/p&gt;
&lt;p&gt;&lt;a class=&quot;reference external&quot; href=&quot;http://2010.pgday.it/registrazione&quot;&gt;Le iscrizioni sono aperte&lt;/a&gt;: fino al 21 novembre sarà possibile registrarsi al prezzo di 50 euro (inclusi coffee break e pranzo). La &lt;a class=&quot;reference external&quot; href=&quot;http://2010.pgday.it/sede-del-pgday-2010&quot;&gt;sede dell'evento&lt;/a&gt; è al &lt;a class=&quot;reference external&quot; href=&quot;http://www.icavour.it/&quot;&gt;Centro Congressi iCavour&lt;/a&gt;, a due passi dalla stazione Termini.&lt;/p&gt;
&lt;p&gt;Ci vediamo a Roma, ciao!&lt;/p&gt;
</content>
  </entry>
  <entry xml:base="https://www.psycopg.org/articles/2010/11/11/links-about-building-psycopg-mac-os-x/">
    <title type="text">Links about building Psycopg on Mac OS X</title>
    <id>urn:uuid:a4cb07b5-6d3c-3964-8209-da0ed8354521</id>
    <updated>2010-11-11T00:00:00Z</updated>
    <link href="https://www.psycopg.org/articles/2010/11/11/links-about-building-psycopg-mac-os-x/" />
    <author>
      <name>Daniele Varrazzo</name>
    </author>
    <content type="html">&lt;p&gt;Looks like building Psycopg on OS X is tricky: the code needs no tweak, but linking against the right library seems problematic.&lt;/p&gt;
&lt;!-- CUT-HERE --&gt;
&lt;p&gt;Here is a list of articles I've found about the matter or I've been suggested: please take a look at these and leave a comment if you wish to suggest anything else or share your experience.&lt;/p&gt;
&lt;ol class=&quot;arabic simple&quot;&gt;
&lt;li&gt;&lt;a class=&quot;reference external&quot; href=&quot;http://blog.jonypawks.net/2008/06/20/installing-psycopg2-on-os-x/&quot;&gt;Installing psycopg2 on OS X&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class=&quot;reference external&quot; href=&quot;http://ronny.haryan.to/archives/2008/09/12/psycopg2-and-64-bit-apache-on-leopard/&quot;&gt;psycopg2 and 64-bit Apache on Leopard&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class=&quot;reference external&quot; href=&quot;http://blog.timc3.com/2010/08/20/psycopg2-os-x-_pqbackendpid/&quot;&gt;psycopg2 OS X – _PQbackendPID&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class=&quot;reference external&quot; href=&quot;http://blog.serverhorror.com/2010/04/28/python-psycopg2-postgresql&quot;&gt;Python, psycopg2, postgresql84 and Mac OS X Snow Leopard&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;If you know enough to write a comprehensive article you are welcome!&lt;/p&gt;
</content>
  </entry>
  <entry xml:base="https://www.psycopg.org/articles/2010/11/06/psycopg-230-beta1-released/">
    <title type="text">Psycopg 2.3.0-beta1 released</title>
    <id>urn:uuid:91232779-f3cd-3aba-a4d2-ce0911792e4e</id>
    <updated>2010-11-06T00:00:00Z</updated>
    <link href="https://www.psycopg.org/articles/2010/11/06/psycopg-230-beta1-released/" />
    <author>
      <name>Daniele Varrazzo</name>
    </author>
    <content type="html">&lt;p&gt;We have just released a new testing package: &lt;a class=&quot;reference external&quot; href=&quot;https://pypi.org/packages/source/p/psycopg2/psycopg2-2.3.0-beta1.tar.gz&quot;&gt;psycopg 2.3.0-beta1&lt;/a&gt;!&lt;/p&gt;
&lt;!-- CUT-HERE --&gt;
&lt;p&gt;As &lt;a class=&quot;reference external&quot; href=&quot;/articles/2010/11/02/new-features-upcoming-psycopg-release/&quot;&gt;previously described&lt;/a&gt;  the 2.3 introduces several new features:&lt;/p&gt;
&lt;ul class=&quot;simple&quot;&gt;
&lt;li&gt;&lt;a class=&quot;reference external&quot; href=&quot;/docs/extras.html#hstore-data-type&quot;&gt;&lt;tt class=&quot;docutils literal&quot;&gt;dict&lt;/tt&gt; to &lt;tt class=&quot;docutils literal&quot;&gt;hstore&lt;/tt&gt;&lt;/a&gt; adaptation, compatible with both PostgreSQL 9.0 and previous versions&lt;/li&gt;
&lt;li&gt;&lt;a class=&quot;reference external&quot; href=&quot;/docs/usage.html#two-phase-commit-protocol-support&quot;&gt;two-phase commit&lt;/a&gt; protocol support as per DBAPI specification&lt;/li&gt;
&lt;li&gt;support for &lt;a class=&quot;reference external&quot; href=&quot;/docs/advanced.html#asynchronous-notifications&quot;&gt;payload in notifications&lt;/a&gt; received from the backend&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;There are other minor changes and improvements, such as:&lt;/p&gt;
&lt;ul class=&quot;simple&quot;&gt;
&lt;li&gt;an handy &lt;a class=&quot;reference external&quot; href=&quot;/docs/extras.html#namedtuple-cursor&quot;&gt;namedtuples returning cursor&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;more faithful &lt;a class=&quot;reference external&quot; href=&quot;/docs/cursor.html#cursor.mogrify&quot;&gt;&lt;tt class=&quot;docutils literal&quot;&gt;mogrify()&lt;/tt&gt;&lt;/a&gt; results&lt;/li&gt;
&lt;li&gt;&lt;a class=&quot;reference external&quot; href=&quot;/docs/errorcodes.html&quot;&gt;&lt;tt class=&quot;docutils literal&quot;&gt;errorcodes&lt;/tt&gt;&lt;/a&gt; updated with the new symbolic constants introduced in PostgreSQL 9.0&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Further details and a list of bug fixes is available in the &lt;tt class=&quot;docutils literal&quot;&gt;NEWS&lt;/tt&gt; file in the distribution.&lt;/p&gt;
</content>
  </entry>
  <entry xml:base="https://www.psycopg.org/articles/2010/11/02/new-features-upcoming-psycopg-release/">
    <title type="text">New features in the upcoming Psycopg release</title>
    <id>urn:uuid:413c0b8e-4fef-31cc-a524-af0976acb3b5</id>
    <updated>2010-11-02T00:00:00Z</updated>
    <link href="https://www.psycopg.org/articles/2010/11/02/new-features-upcoming-psycopg-release/" />
    <author>
      <name>Daniele Varrazzo</name>
    </author>
    <content type="html">&lt;p&gt;There are several new features being prepared in the upcoming Psycopg version. The &lt;a class=&quot;reference external&quot; href=&quot;/docs/&quot;&gt;documentation&lt;/a&gt; refers to it as release 2.2.3 but it may be ultimately released as 2.3. The main target of the release is to expose some of the new features introduced in &lt;a class=&quot;reference external&quot; href=&quot;http://www.postgresql.org/about/news.1235&quot;&gt;PostgreSQL 9.0&lt;/a&gt;.&lt;/p&gt;
&lt;!-- CUT-HERE --&gt;
&lt;p&gt;&lt;strong&gt;Update&lt;/strong&gt; The new features &lt;a class=&quot;reference external&quot; href=&quot;/psycopg/articles/2010/11/06/psycopg-230-beta1-released/&quot;&gt;have been released&lt;/a&gt; in &lt;a class=&quot;reference external&quot; href=&quot;https://pypi.org/packages/source/p/psycopg2/psycopg2-2.3.0-beta1.tar.gz&quot;&gt;Psycopg 2.3.0-beta1&lt;/a&gt;.&lt;/p&gt;
&lt;div class=&quot;section&quot; id=&quot;dict-to-hstore-mapping&quot;&gt;
&lt;h2&gt;&lt;tt class=&quot;docutils literal&quot;&gt;dict&lt;/tt&gt; to &lt;tt class=&quot;docutils literal&quot;&gt;hstore&lt;/tt&gt; mapping&lt;/h2&gt;
&lt;p&gt;&lt;a class=&quot;reference external&quot; href=&quot;http://www.postgresql.org/docs/9.0/static/hstore.html&quot;&gt;&lt;tt class=&quot;docutils literal&quot;&gt;hstore&lt;/tt&gt;&lt;/a&gt; is a very interesting data type available in PostgreSQL: each &lt;tt class=&quot;docutils literal&quot;&gt;hstore&lt;/tt&gt; value is a set of key/value pairs . In the release 9.0 &lt;tt class=&quot;docutils literal&quot;&gt;hstore&lt;/tt&gt; received a lot of improvements that made it still more useful. Building an index on an &lt;tt class=&quot;docutils literal&quot;&gt;hstore&lt;/tt&gt; column will allow fast search for values containing one or more provided keys/values. The new Psycopg release will allow to map Python dictionaries into &lt;tt class=&quot;docutils literal&quot;&gt;hstore&lt;/tt&gt; and back. String and Unicode keys and values are supported: you can find here &lt;a class=&quot;reference external&quot; href=&quot;/docs/extras.html#hstore-data-type&quot;&gt;documentation&lt;/a&gt; and &lt;a class=&quot;reference external&quot; href=&quot;https://www.develer.com/gitweb/pub?p=users/piro/psycopg2.git;a=shortlog;h=refs/heads/adapt-dict&quot;&gt;implementation&lt;/a&gt; in the &lt;tt class=&quot;docutils literal&quot;&gt;&lt;span class=&quot;pre&quot;&gt;adapt-dict&lt;/span&gt;&lt;/tt&gt; git branch.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;section&quot; id=&quot;notify-payload&quot;&gt;
&lt;h2&gt;Notify payload&lt;/h2&gt;
&lt;p&gt;PostgreSQL includes an &lt;a class=&quot;reference external&quot; href=&quot;http://www.postgresql.org/docs/9.0/static/sql-notify.html&quot;&gt;asynchronous notification mechanism&lt;/a&gt; allowing clients to subscribe to a certain notification channel and receive events from the database, allowing efficient communication between processes connected to the same database. Previously only the channel name could be notified: in PostgreSQL 9.0 a payload string can be attached to an event, allowing more flexible communication: if previously a listening client could have been notified about data changed in a specific value, it is now possible, for instance, to report &lt;em&gt;which record&lt;/em&gt; has been modified. The mechanism is completely generic and it's up to the client applications to find a good use for it. Here you can find &lt;a class=&quot;reference external&quot; href=&quot;/docs/advanced.html#asynchronous-notifications&quot;&gt;documentation&lt;/a&gt; and &lt;a class=&quot;reference external&quot; href=&quot;https://www.develer.com/gitweb/pub?p=users/piro/psycopg2.git;a=shortlog;h=refs/heads/notify-payload&quot;&gt;implementation&lt;/a&gt; for the notification payload in Psycopg.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;section&quot; id=&quot;two-phase-commit&quot;&gt;
&lt;h2&gt;Two-phase commit&lt;/h2&gt;
&lt;p&gt;&lt;a class=&quot;reference external&quot; href=&quot;:&quot;&gt;Two-phase commit&lt;/a&gt; is actually &lt;a class=&quot;reference external&quot; href=&quot;http://www.postgresql.org/docs/9.0/static/sql-prepare-transaction.html&quot;&gt;supported by PostgreSQL&lt;/a&gt; since release 8.1: it enables the database to participate in distributed operations with transactional characteristics. You can find here &lt;a class=&quot;reference external&quot; href=&quot;/docs/usage.html#two-phase-commit-protocol-support&quot;&gt;documentation&lt;/a&gt; and &lt;a class=&quot;reference external&quot; href=&quot;https://www.develer.com/gitweb/pub?p=users/piro/psycopg2.git;a=shortlog;h=refs/heads/tpc&quot;&gt;implementation&lt;/a&gt; in the git &lt;tt class=&quot;docutils literal&quot;&gt;tpc&lt;/tt&gt; branch.&lt;/p&gt;
&lt;p&gt;&lt;a class=&quot;reference external&quot; href=&quot;http://www.python.org/dev/peps/pep-0249/&quot;&gt;Python DBAPI 2.0&lt;/a&gt; suggests a specific interface for 2pc-related methods that maps fine enough on PostgreSQL commands. What maps slightly worse is the format chosen for the distributed transactions identifiers: the DBAPI is inspired to the &lt;a class=&quot;reference external&quot; href=&quot;http://www.opengroup.org/bookstore/catalog/c193.htm&quot;&gt;Open Group XA specification&lt;/a&gt; according to which every transaction is identifies by a triple (&lt;em&gt;format id&lt;/em&gt;, &lt;em&gt;global transaction id&lt;/em&gt;, &lt;em&gt;branch qualifier&lt;/em&gt;). PostgreSQL doesn't follow this standard and accepts any string (up to a certain length) as a transaction identifier: this creates the need to map from triples to strings and back. We have currently implemented the same algorithm used in the JDBC driver: it works fine but has the drawback of producing unreadable strings as transaction ids. We may use something different, such as concatenating the elements of a xid with a specific character (e.g. &lt;tt class=&quot;docutils literal&quot;&gt;:&lt;/tt&gt;) and escaping colons provided in the xid components. Would it be more valuable to have readable transaction identifiers or interoperation with Java tools? I don't have much experience about the matter, so any suggestion would be appreciated.&lt;/p&gt;
&lt;p&gt;Please feel free to check the new features details in the documentation, to try the code under development and to leave  your feedback!&lt;/p&gt;
&lt;/div&gt;
</content>
  </entry>
  <entry xml:base="https://www.psycopg.org/articles/2010/10/26/psycopg-pgday-europe/">
    <title type="text">Psycopg at PgDay Europe</title>
    <id>urn:uuid:b2f657c3-59b5-3a60-ad67-2f17a9dbe7cc</id>
    <updated>2010-10-26T00:00:00Z</updated>
    <link href="https://www.psycopg.org/articles/2010/10/26/psycopg-pgday-europe/" />
    <author>
      <name>Daniele Varrazzo</name>
    </author>
    <content type="html">&lt;p&gt;Hello,&lt;/p&gt;
&lt;p&gt;I will be at &lt;a class=&quot;reference external&quot; href=&quot;http://2010.pgday.eu/&quot;&gt;PgDay Europe 2010&lt;/a&gt; in Stuttgart with a talk about Psycopg: &lt;a class=&quot;reference external&quot; href=&quot;https://www.postgresql.eu/events/schedule/pgday2010/session/72-advanced-postgresql-access-from-python-with-psycopg/&quot;&gt;Advanced PostgreSQL Access from Python with Psycopg&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;The talk will be about some of the most advanced functionalities and new features available in the latest Psycopg releases: asynchronous communication, notifications, server-side cursors, advanced data mapping between Python and PostgreSQL, the upcoming support for two-phase commit and hstore objects.&lt;/p&gt;
&lt;p&gt;If you have any suggestion about what you'd like to be shown in the talk, you may leave a feedback.&lt;/p&gt;
&lt;p&gt;See you in Stuttgart!&lt;/p&gt;
</content>
  </entry>
  <entry xml:base="https://www.psycopg.org/articles/2010/10/22/passing-connections-functions-using-decorator/">
    <title type="text">Passing connections to functions using a decorator</title>
    <id>urn:uuid:b0bc168f-1a23-3dfb-8be1-eaa2fac86913</id>
    <updated>2010-10-22T00:00:00Z</updated>
    <link href="https://www.psycopg.org/articles/2010/10/22/passing-connections-functions-using-decorator/" />
    <author>
      <name>Daniele Varrazzo</name>
    </author>
    <content type="html">&lt;p&gt;In many script I write, there are functions requiring database operations. Every time I need them, I try to write such code in functions like:&lt;/p&gt;
&lt;pre class=&quot;code python literal-block&quot;&gt;
&lt;span class=&quot;nd&quot;&gt;&amp;#64;with_connection&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;do_some_job&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;cnn&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;arg1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;arg2&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;kc&quot;&gt;None&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;cur&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;cnn&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;cursor&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;cur&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;execute&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;SQL&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;arg1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;arg2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;# or something else&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;do_some_job&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;42&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;arg2&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'hi'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;/pre&gt;
&lt;!-- CUT-HERE --&gt;
&lt;p&gt;There are many benefits for this pattern:&lt;/p&gt;
&lt;ul class=&quot;simple&quot;&gt;
&lt;li&gt;the client code doesn't depend on the details of connection creation and disposal&lt;/li&gt;
&lt;li&gt;the client code doesn't either need to deal with the session management: no more pending transactions...&lt;/li&gt;
&lt;li&gt;connection management is consistent throughout all the functions.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Implementation of such a decorator is straightforward, but because of the many possible variation it never made its way into a proper library. It goes something like:&lt;/p&gt;
&lt;pre class=&quot;code python literal-block&quot;&gt;
&lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;with_connection&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;f&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;with_connection_&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;args&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;**&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;kwargs&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
        &lt;span class=&quot;c1&quot;&gt;# or use a pool, or a factory function...&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;cnn&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;psycopg&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;connect&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;DSN&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;try&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;rv&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;f&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;cnn&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;args&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;**&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;kwargs&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;except&lt;/span&gt; &lt;span class=&quot;ne&quot;&gt;Exception&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;e&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;cnn&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;rollback&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
            &lt;span class=&quot;k&quot;&gt;raise&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;else&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;cnn&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;commit&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;# or maybe not&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;finally&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;cnn&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;close&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;

        &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;rv&lt;/span&gt;

    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;with_connection_&lt;/span&gt;
&lt;/pre&gt;
&lt;p&gt;There may be many variations: you may use use a connection pooler, you may want a read only or an autocommit connection... Best strategy I've found is just to keep one or a few decorator like this in the project I'm working at and use it for a consistent management of the database communications in the desired scope (the project, a package, a module...)&lt;/p&gt;
</content>
  </entry>
  <entry xml:base="https://www.psycopg.org/articles/2010/07/18/psycopg-222-released/">
    <title type="text">Psycopg 2.2.2 released</title>
    <id>urn:uuid:8ae65f27-918f-3c18-8a06-4321c99e964f</id>
    <updated>2010-07-18T00:00:00Z</updated>
    <link href="https://www.psycopg.org/articles/2010/07/18/psycopg-222-released/" />
    <author>
      <name>Federico Di Gregorio</name>
    </author>
    <content type="html">&lt;p&gt;Hi *,&lt;/p&gt;
&lt;p&gt;summer release! Just bugfixes, this time. Get it from:&lt;/p&gt;
&lt;ul class=&quot;simple&quot;&gt;
&lt;li&gt;&lt;a class=&quot;reference external&quot; href=&quot;https://pypi.org/packages/source/p/psycopg2/psycopg2-2.2.2.tar.gz&quot;&gt;https://pypi.org/packages/source/p/psycopg2/psycopg2-2.2.2.tar.gz&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class=&quot;reference external&quot; href=&quot;https://pypi.org/packages/source/p/psycopg2/psycopg2-2.2.2.tar.gz.asc&quot;&gt;https://pypi.org/packages/source/p/psycopg2/psycopg2-2.2.2.tar.gz.asc&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;!-- CUT-HERE --&gt;
&lt;div class=&quot;section&quot; id=&quot;what-s-new-in-psycopg-2-2-2&quot;&gt;
&lt;h2&gt;What's new in psycopg 2.2.2&lt;/h2&gt;
&lt;div class=&quot;section&quot; id=&quot;bux-fixes&quot;&gt;
&lt;h3&gt;Bux fixes&lt;/h3&gt;
&lt;ul class=&quot;simple&quot;&gt;
&lt;li&gt;the call to &lt;tt class=&quot;docutils literal&quot;&gt;logging.basicConfig()&lt;/tt&gt; in pool.py has been dropped: it
was messing with some projects using logging (and a library should
not initialize the logging system anyway.)&lt;/li&gt;
&lt;li&gt;psycopg now correctly handles time zones with seconds in the UTC
offset. The old &lt;tt class=&quot;docutils literal&quot;&gt;register_tstz_w_secs()&lt;/tt&gt; function is deprecated and
will raise a warning if called.&lt;/li&gt;
&lt;li&gt;Exceptions raised by the column iterator are propagated.&lt;/li&gt;
&lt;li&gt;Exceptions raised by &lt;tt class=&quot;docutils literal&quot;&gt;executemany()&lt;/tt&gt; interators are propagated.&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&quot;line-block&quot;&gt;
&lt;div class=&quot;line&quot;&gt;Have fun,&lt;/div&gt;
&lt;div class=&quot;line&quot;&gt;federico&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
</content>
  </entry>
  <entry xml:base="https://www.psycopg.org/articles/2010/05/17/psycopg-221-released/">
    <title type="text">Psycopg 2.2.1 released</title>
    <id>urn:uuid:f4304ab1-a375-36cf-92a6-ee7fd717f56b</id>
    <updated>2010-05-17T00:00:00Z</updated>
    <link href="https://www.psycopg.org/articles/2010/05/17/psycopg-221-released/" />
    <author>
      <name>Federico Di Gregorio</name>
    </author>
    <content type="html">&lt;p&gt;Hi *,&lt;/p&gt;
&lt;p&gt;repeat with me:&lt;/p&gt;
&lt;pre class=&quot;code python literal-block&quot;&gt;
&lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;x&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;xrange&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1000&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
    &lt;span class=&quot;nb&quot;&gt;print&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;Always check it build on windows!&amp;quot;&lt;/span&gt;
&lt;/pre&gt;
&lt;p&gt;but thank to Jason Erickson here is 2.2.1 that DO build on windows. :)
No excerpt this time, it's a single liner, but here are the URLs:&lt;/p&gt;
&lt;ul class=&quot;simple&quot;&gt;
&lt;li&gt;&lt;a class=&quot;reference external&quot; href=&quot;https://pypi.org/packages/source/p/psycopg2/psycopg2-2.2.1.tar.gz&quot;&gt;https://pypi.org/packages/source/p/psycopg2/psycopg2-2.2.1.tar.gz&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class=&quot;reference external&quot; href=&quot;https://pypi.org/packages/source/p/psycopg2/psycopg2-2.2.1.tar.gz.asc&quot;&gt;https://pypi.org/packages/source/p/psycopg2/psycopg2-2.2.1.tar.gz.asc&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&quot;line-block&quot;&gt;
&lt;div class=&quot;line&quot;&gt;Have fun,&lt;/div&gt;
&lt;div class=&quot;line&quot;&gt;federico&lt;/div&gt;
&lt;/div&gt;
</content>
  </entry>
  <entry xml:base="https://www.psycopg.org/articles/2010/05/16/psycopg-220-released/">
    <title type="text">Psycopg 2.2.0 released</title>
    <id>urn:uuid:fb0c2017-13b1-3257-b96b-216e84fb86f5</id>
    <updated>2010-05-16T00:00:00Z</updated>
    <link href="https://www.psycopg.org/articles/2010/05/16/psycopg-220-released/" />
    <author>
      <name>Federico Di Gregorio</name>
    </author>
    <content type="html">&lt;p&gt;With many thanks to all the contributors here it is, psycopg 2.2.0:&lt;/p&gt;
&lt;ul class=&quot;simple&quot;&gt;
&lt;li&gt;&lt;a class=&quot;reference external&quot; href=&quot;https://pypi.org/packages/source/p/psycopg2/psycopg2-2.2.0.tar.gz&quot;&gt;https://pypi.org/packages/source/p/psycopg2/psycopg2-2.2.0.tar.gz&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class=&quot;reference external&quot; href=&quot;https://pypi.org/packages/source/p/psycopg2/psycopg2-2.2.0.tar.gz.asc&quot;&gt;https://pypi.org/packages/source/p/psycopg2/psycopg2-2.2.0.tar.gz.asc&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;As always, an excerpt from the NEWS file follows.&lt;/p&gt;
&lt;div class=&quot;line-block&quot;&gt;
&lt;div class=&quot;line&quot;&gt;Have fun,&lt;/div&gt;
&lt;div class=&quot;line&quot;&gt;federico&lt;/div&gt;
&lt;/div&gt;
&lt;!-- CUT-HERE --&gt;
&lt;div class=&quot;section&quot; id=&quot;what-s-new-in-psycopg-2-2-0&quot;&gt;
&lt;h2&gt;What's new in psycopg 2.2.0&lt;/h2&gt;
&lt;p&gt;This is the first release of the new 2.2 series, supporting not just
one but two different ways of executing asynchronous queries, thanks to
Jan and Daniele (with a little help from me and others, but they did
99% of the work so they deserve their names here in the news.)&lt;/p&gt;
&lt;p&gt;psycopg now supports both classic &lt;tt class=&quot;docutils literal&quot;&gt;select()&lt;/tt&gt; loops and &amp;quot;green&amp;quot; coroutine
libraries. It is all in the documentation, so just point your browser to
&lt;a class=&quot;reference external&quot; href=&quot;/psycopg/docs/advanced.html#asynchronous-support&quot;&gt;doc/html/advanced.html&lt;/a&gt;.&lt;/p&gt;
&lt;div class=&quot;section&quot; id=&quot;other-new-features&quot;&gt;
&lt;h3&gt;Other new features&lt;/h3&gt;
&lt;ul class=&quot;simple&quot;&gt;
&lt;li&gt;&lt;tt class=&quot;docutils literal&quot;&gt;truncate()&lt;/tt&gt; method for lobjects.&lt;/li&gt;
&lt;li&gt;&lt;tt class=&quot;docutils literal&quot;&gt;COPY&lt;/tt&gt; functions are now a little bit faster.&lt;/li&gt;
&lt;li&gt;All builtin PostgreSQL to Python typecasters are now available from
the &lt;tt class=&quot;docutils literal&quot;&gt;psycopg2.extensions&lt;/tt&gt; module.&lt;/li&gt;
&lt;li&gt;Notifications from the backend are now available right after the
&lt;tt class=&quot;docutils literal&quot;&gt;execute()&lt;/tt&gt; call (before client code needed to call &lt;tt class=&quot;docutils literal&quot;&gt;isbusy()&lt;/tt&gt; to
ensure &lt;tt class=&quot;docutils literal&quot;&gt;NOTIFY&lt;/tt&gt; reception.)&lt;/li&gt;
&lt;li&gt;Better timezone support.&lt;/li&gt;
&lt;li&gt;Lots of documentation updates.&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class=&quot;section&quot; id=&quot;bug-fixes&quot;&gt;
&lt;h3&gt;Bug fixes&lt;/h3&gt;
&lt;ul class=&quot;simple&quot;&gt;
&lt;li&gt;Fixed some gc/refcounting problems.&lt;/li&gt;
&lt;li&gt;Fixed reference leak in &lt;tt class=&quot;docutils literal&quot;&gt;NOTIFY&lt;/tt&gt; reception.&lt;/li&gt;
&lt;li&gt;Fixed problem with PostgreSQL not casting string literals to the
correct types in some situations: psycopg now add an explicit cast
to dates, times and bytea representations.&lt;/li&gt;
&lt;li&gt;Fixed &lt;tt class=&quot;docutils literal&quot;&gt;TimestampFromTicks()&lt;/tt&gt; and &lt;tt class=&quot;docutils literal&quot;&gt;TimeFromTicks()&lt;/tt&gt; for seconds &amp;gt;= 59.5.&lt;/li&gt;
&lt;li&gt;Fixed spurious exception raised when calling C typecasters from
Python ones.&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;
</content>
  </entry>
</feed>
